{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>\u4e2d\u6587</p> <p>\u8fd9\u662f note \u7c7b\u578b\u7684\u63d0\u793a\u6846</p> <p>\u63d0\u793a\uff1a\u66f4\u591a\u7cbe\u5f69\u5185\u5bb9\u8bb0\u5f97\u5173\u6ce8\u6211\u554a</p> <p>\u8fd9\u662f success \u7c7b\u578b\u7684\u63d0\u793a\u6846</p> <p>\u6210\u529f\uff01</p> <p>\u8fd9\u662f failure \u7c7b\u578b\u7684\u63d0\u793a\u6846</p> <p>\u5931\u8d25\uff01</p> <p>\u8fd9\u662f bug \u7c7b\u578b\u7684\u63d0\u793a\u6846</p> <p>\u53d1\u73b0\u4e00\u4e2a bug\uff0c\u8bf7\u5c3d\u5feb\u4fee\u590d\uff01</p>"},{"location":"develop-environment/","title":"Dev Environment Configuration","text":"<p>The development of robot apps relies on Node.js environment and IDE tools.</p>"},{"location":"develop-environment/#nodejs-environmental-installation","title":"Node.js environmental installation","text":"<p>The compilation and debugging tool of robot application is developed based on Node.js, so for normal use, the Node.js runtime environment must be configured.</p> <p>Download and install the Node.js runtime environment as required: https://nodejs.org/en/download/</p>"},{"location":"develop-environment/#ide-tool","title":"IDE Tool","text":"<p>The development of robot application uses JavaScript language, WebStorm or Visual Studio Code is recommended for development</p> <ul> <li>WebStorm</li> <li>Visual Studio Code</li> </ul>"},{"location":"develop-environment/#introducing-the-sdk-into-the-project","title":"Introducing the SDK into the project","text":"<pre><code># npm i -save-dev @autoxing/robot-js-sdk\n</code></pre>"},{"location":"init-example/","title":"SDK Initialization Example","text":"<p>The SDK can be used normally after the initialization is completed. The following is an example of SDK initialization code:</p> <p>``` javascript</p> <p>import { AXRobot, AppMode } from \"@autoxing/robot-js-sdk\";</p> <p>// create an instance of AXRobot const axRobot = new AXRobot(\"\", \"\", AppMode.WAN_APP); <p>// Initialize the AXRobot instance const successed = await axRobot.init(); if (successed) {    try {      // connect to the specified robot      const res = await axRobot.connectRobot({        robotId: \"\"      });      console.log(\"connect success: \" + res.robotId);      // do something with robot    } catch(err) {      console.log(err.errText)    } } else {    // initialization failed } <p>````</p> <ul> <li>appId - the application ID, which can be applied to relevant operators</li> <li>appSecret - data request key, which can be provided to relevant operators</li> </ul> <p>example</p>"},{"location":"introduction/","title":"Introduction","text":"<p>Welcome to the world of robot development. Based on the SDK of AutoXing Robot, you can quickly realize the comprehensive control of the robot and create your own robot. This document describes how to develop a robot application using JavaScript.</p>"},{"location":"introduction/#sdk-organizational-structure","title":"SDK Organizational Structure","text":""},{"location":"introduction/#basic-interfaces","title":"Basic Interfaces","text":"<p>The basic interfaces are fine-grained API calls that can be invoked in code at any time. The interface returns the result of the call with a Promise.</p>"},{"location":"introduction/#advanced-functions","title":"Advanced Functions","text":"<p>Advanced functions provide API calls to cloud services, returning the call results through Promises in a unified manner.</p>"},{"location":"introduction/#functional-units","title":"Functional Units","text":"<p>Functional components provide advanced robot operations, such as navigation and patrol, automatic recharge, etc.</p>"},{"location":"introduction/#preliminary-knowledge","title":"Preliminary Knowledge","text":"<p>SDK kits are provided in the form of Node.js modules. Developers are required to have some knowledge of Node.js and JavaScript. If you are not familiar with Node.js and JavaScript, please check the official Node.js and JavaScript documentation first:</p> <ul> <li>Node.js official document</li> <li>JavaScript document</li> </ul>"},{"location":"map-example/","title":"Map Display Example","text":"<p>Define the map container in the HTML file:</p> <p>```html ...</p> <p>... ````</p> <p>Initialize the map</p> <p>```javascript import { AXRobot, AppMode } from \"@autoxing/robot-js-sdk\";</p> <p>// create an instance of AXRobot const axRobot = new AXRobot(\"\", \"\", AppMode.WAN_APP); const success = await axRobot.init(); <p>if (success) { // create map const axMap = axRobot.createMap(\"map\"); // map is the id of the HTML container tag</p> <p>// Set the area to display on the map axMap.setAreaMap(\"\"); // areaId is the map area identifier <p>// do something with map ````</p> <p>example</p>"},{"location":"private-example/","title":"SDK Privatization Example","text":"<p>The SDK can be used normally after the initialization is completed. The following is an example of SDK privatization code:</p> <pre><code>import { AXRobot, AppMode } from \"@autoxing/robot-js-sdk\";\n\n// create an instance of AXRobot\nconst axRobot = new AXRobot(\"&lt;appId&gt;\", \"&lt;appSecret&gt;\", AppMode.WAN_APP \"&lt;serverUrl&gt;\", \"websocketUrl\");\n\n// Initialize the AXRobot instance\nconst successed = await axRobot.init();\nif (successed) {\n   try {\n     // connect to the specified robot\n     const res = await axRobot.connectRobot({\n       robotId: \"&lt;robotId&gt;\"\n     });\n     console.log(\"connect success: \" + res.robotId);\n     // do something with robot\n   } catch(err) {\n     console.log(err.errText)\n   }\n} else {\n   // initialization failed\n}\n</code></pre> <ul> <li>appId - the application ID, which can be applied to relevant operators</li> <li>appSecret - data request key, which can be provided to relevant operators</li> <li>serverUrl - privatization service address</li> <li> <p>websocketUrl - privatization websocket address - optional</p> </li> <li> <p>explain: </p> </li> <li>1: Need to use SDK version v1.0.74 or above</li> <li>2: If you only fill in serverUrl and do not fill in websocketUrl, then websocketUrl will automatically generate a websocket connection address based on serverUrl</li> <li>example: http://127.0.0.1:8080/ -&gt; \u3001https://127.0.0.1:8080/ -&gt; </li> <li>3: If you fill in websocketUrl, use the current url</li> </ul> <p>example</p>"},{"location":"AXMap/AXMap-deleteCruise/","title":"Delete Cruise Route","text":""},{"location":"AXMap/AXMap-deleteCruise/#deletecruiseids-promiseboolean","title":"<code>deleteCruise(ids) -&gt; {Promise&lt;boolean&gt;}</code>","text":"<p>Delete Cruise Route</p>"},{"location":"AXMap/AXMap-deleteCruise/#parameters","title":"Parameters","text":"Name Data Type Description <code>ids</code> number[] Ids"},{"location":"AXMap/AXMap-deleteCruise/#return-value-promiseboolean","title":"Return value <code>Promise.&lt;boolean&gt;</code>","text":"<p>whether succeed</p> <ul> <li>true - success</li> <li>false - fail</li> </ul>"},{"location":"AXMap/AXMap-deleteCruise/#example","title":"Example","text":"<pre><code>...\nconst success = await axRobot.deleteCruise(ids);\n...\n</code></pre>"},{"location":"AXMap/AXMap-edit/","title":"Edit Map","text":""},{"location":"AXMap/AXMap-edit/#clearareamap-void","title":"<code>clearAreaMap() -&gt; {void}</code>","text":"<p>Clear area map</p>"},{"location":"AXMap/AXMap-edit/#parameters","title":"Parameters","text":"<p>none</p>"},{"location":"AXMap/AXMap-edit/#return-value","title":"Return Value","text":"<p>none</p>"},{"location":"AXMap/AXMap-edit/#example","title":"Example","text":"<p>```javascript ... axMap.clearAreaMap(); ... ````</p>"},{"location":"AXMap/AXMap-edit/#clearfeature-void","title":"<code>clearFeature() -&gt; {void}</code>","text":"<p>Clear map data</p>"},{"location":"AXMap/AXMap-edit/#parameters_1","title":"Parameters","text":"<p>none</p>"},{"location":"AXMap/AXMap-edit/#return-value_1","title":"Return Value","text":"<p>none</p>"},{"location":"AXMap/AXMap-edit/#example_1","title":"Example","text":"<p>```javascript ... axMap.clearFeature(); ... ````</p>"},{"location":"AXMap/AXMap-edit/#deletefeatureid-void","title":"<code>deleteFeature(id) -&gt; {void}</code>","text":"<p>deletes the specified feature</p>"},{"location":"AXMap/AXMap-edit/#parameters_2","title":"Parameters","text":"Name Data Type Description <code>id</code> string feature identifier"},{"location":"AXMap/AXMap-edit/#return-value_2","title":"Return Value","text":"<p>none</p>"},{"location":"AXMap/AXMap-edit/#example_2","title":"Example","text":"<p>```javascript ... axMap.deleteFeature(\"\"); ... ````"},{"location":"AXMap/AXMap-edit/#editposecoordinates-properties-opt-void","title":"<code>editPose(coordinates, properties opt) -&gt; {void}</code>","text":"<p>Set the current point pose</p>"},{"location":"AXMap/AXMap-edit/#parameters_3","title":"Parameters","text":"Name Data Type Description <code>coordinates</code> array coordinates [x, y] <code>properties</code> object optional; custom properties"},{"location":"AXMap/AXMap-edit/#return-value_3","title":"Return Value","text":"<p>none</p>"},{"location":"AXMap/AXMap-edit/#example_3","title":"Example","text":"<p>```javascript ... axMap.editPose([0, 0]); ... ````</p>"},{"location":"AXMap/AXMap-edit/#endeditpose-object","title":"<code>endEditPose() -&gt; {object}</code>","text":"<p>Cancel the current point pose</p>"},{"location":"AXMap/AXMap-edit/#parameters_4","title":"Parameters","text":"<p>none</p>"},{"location":"AXMap/AXMap-edit/#return-value-object","title":"Return Value <code>object</code>","text":"<p>Edited pose</p>"},{"location":"AXMap/AXMap-edit/#example_4","title":"Example","text":"<p>```javascript ... const post = axMap.endEditPose(); ... ````</p>"},{"location":"AXMap/AXMap-getCruises/","title":"Get Cruise Route","text":""},{"location":"AXMap/AXMap-getCruises/#getcruises-promiseany","title":"<code>getCruises() -&gt; {Promise&lt;any&gt;}</code>","text":"<p>Get Cruise Route</p>"},{"location":"AXMap/AXMap-getCruises/#parameters","title":"Parameters","text":"Name Data Type Description <code>businessId</code> string optional; Business Id"},{"location":"AXMap/AXMap-getCruises/#return-value-promiseany","title":"Return value <code>Promise.&lt;any&gt;</code>","text":"Name Data Type Description <code>result</code> any Cruise Information"},{"location":"AXMap/AXMap-getCruises/#example","title":"Example","text":"<pre><code>...\nconst result = await axRobot.getCruises(cruiseInfo);\nconsole.log(result.status)\nconsole.log(result.data)\nlet cruise = result.data[0]\nconsole.log(cruise.id)\nconsole.log(cruise.name)\nconsole.log(cruise.businessId)\nconsole.log(cruise.sites)\n...\n</code></pre>"},{"location":"AXMap/AXMap-interaction/","title":"Map Interaction","text":""},{"location":"AXMap/AXMap-interaction/#setareamapareaid-void","title":"<code>setAreaMap(areaId) -&gt; {void}</code>","text":"<p>Set area map</p>"},{"location":"AXMap/AXMap-interaction/#parameters","title":"Parameters","text":"Name Data Type Description <code>areaId</code> string Map area ID"},{"location":"AXMap/AXMap-interaction/#return-value","title":"Return Value","text":"<p>none</p>"},{"location":"AXMap/AXMap-interaction/#example","title":"Example","text":"<p>```javascript ... axMap.setAreaMap(\"\"); ... ````"},{"location":"AXMap/AXMap-interaction/#setmapcentercoordinates-void","title":"<code>setMapCenter(coordinates) -&gt; {void}</code>","text":"<p>Set the map center point</p>"},{"location":"AXMap/AXMap-interaction/#parameters_1","title":"Parameters","text":"Name Data Type Description <code>coordinates</code> array center point coordinates [x, y]"},{"location":"AXMap/AXMap-interaction/#return-value_1","title":"Return Value","text":"<p>none</p>"},{"location":"AXMap/AXMap-interaction/#example_1","title":"Example","text":"<p>```javascript ... axMap.setMapCenter([0, 0]); ... ````</p>"},{"location":"AXMap/AXMap-interaction/#zoomtozoom-void","title":"<code>zoomTo(zoom) -&gt; {void}</code>","text":"<p>Set the map zoom level</p>"},{"location":"AXMap/AXMap-interaction/#parameters_2","title":"Parameters","text":"Name Data Type Description <code>zoom</code> number The zoom level of the map, the value range is 0~22"},{"location":"AXMap/AXMap-interaction/#return-value_2","title":"Return Value","text":"<p>none</p>"},{"location":"AXMap/AXMap-interaction/#example_2","title":"Example","text":"<p>```javascript ... axMap.zoomTo(10); ... ````</p>"},{"location":"AXMap/AXMap-interaction/#flycoordinates-void","title":"<code>fly(coordinates) -&gt; {void}</code>","text":"<p>map fly to a point</p>"},{"location":"AXMap/AXMap-interaction/#parameters_3","title":"Parameters","text":"Name Data Type Description <code>coordinates</code> array target point coordinates [x, y]"},{"location":"AXMap/AXMap-interaction/#return-value_3","title":"Return Value","text":"<p>none</p>"},{"location":"AXMap/AXMap-interaction/#example_3","title":"Example","text":"<p>```javascript ... axMap.fly([0, 0]); ... ````</p>"},{"location":"AXMap/AXMap-interaction/#getcurrentpointpositionfeatureid-object","title":"<code>getCurrentPointPosition(featureId) -&gt; {object}</code>","text":"<p>Get the currently selected point pose</p>"},{"location":"AXMap/AXMap-interaction/#parameters_4","title":"Parameters","text":"Name Data Type Description <code>featureId</code> string point identifier"},{"location":"AXMap/AXMap-interaction/#return-value-object","title":"Return Value <code>object</code>","text":"<p>pose information</p> <ul> <li><code>x</code> - coordinate x component</li> <li><code>y</code> - the y component of the coordinate</li> <li><code>yaw</code> - heading angle</li> </ul>"},{"location":"AXMap/AXMap-interaction/#example_4","title":"Example","text":"<p>```javascript ... const pose = axMap.getCurrentPointPosition(\"\"); <p>console.log(pose); // {x:1, y: 2, yaw: 3} ... ````</p>"},{"location":"AXMap/AXMap-interaction/#getfeatureid-object","title":"<code>getFeature(id) -&gt; {object}</code>","text":"<p>Get feature information by ID</p>"},{"location":"AXMap/AXMap-interaction/#parameters_5","title":"Parameters","text":"Name Data Type Description <code>id</code> string feature identifier"},{"location":"AXMap/AXMap-interaction/#return-value-object_1","title":"Return Value <code>object</code>","text":"<p>feature information; structure reference https://geojson.org/</p>"},{"location":"AXMap/AXMap-interaction/#example_5","title":"Example","text":"<p>```javascript ... const feature = axMap.getFeature(\"\"); ... ````"},{"location":"AXMap/AXMap-interaction/#getplacelist-any","title":"<code>getPlaceList() -&gt; {any}</code>","text":"<p>Get all location points</p>"},{"location":"AXMap/AXMap-interaction/#parameters_6","title":"Parameters","text":"<p>none</p>"},{"location":"AXMap/AXMap-interaction/#return-value-any","title":"Return Value <code>any</code>","text":"<p>List of location points; structure reference https://geojson.org/</p>"},{"location":"AXMap/AXMap-interaction/#example_6","title":"Example","text":"<p>```javascript ... const list = axMap.getPlaceList(); ... ````</p>"},{"location":"AXMap/AXMap-interaction/#setclickmapcallbackcallback-void","title":"<code>setClickMapCallback(callback) -&gt; {void}</code>","text":"<p>Set the click map callback method</p>"},{"location":"AXMap/AXMap-interaction/#parameters_7","title":"Parameters","text":"Name Data Type Description <code>callback</code> function callback method"},{"location":"AXMap/AXMap-interaction/#return-value_4","title":"Return Value","text":"<p>none</p>"},{"location":"AXMap/AXMap-interaction/#example_7","title":"Example","text":"<p>```javascript ... axMap.setClickMapCallback(val =&gt; {   console.log(val.type); // fixed to 'LayerPoint'   console.log(val.data); // Clicked element, data structure reference GeoJSON }); ... ````</p>"},{"location":"AXMap/AXMap-interaction/#setselectedfeaturesfeatureid-void","title":"<code>setSelectedFeatures(featureId) -&gt; {void}</code>","text":"<p>Select the feature in the map based on the ID</p>"},{"location":"AXMap/AXMap-interaction/#parameters_8","title":"Parameters","text":"Name Data Type Description <code>featureId</code> string feature ID, multiple feature IDs are separated by commas"},{"location":"AXMap/AXMap-interaction/#return-value_5","title":"Return Value","text":"<p>none</p>"},{"location":"AXMap/AXMap-interaction/#example_8","title":"Example","text":"<p>```javascript ... axMap.setSelectedFeatures(\"\"); ... ````"},{"location":"AXMap/AXMap-other/","title":"Others","text":""},{"location":"AXMap/AXMap-other/#beautifymapimgimgurl-obstacle-througharea-other-promisestring","title":"<code>beautifyMapImg(imgUrl, obstacle, throughArea, other) -&gt; {Promise.&lt;string&gt;}</code>","text":"<p>Beautify the map picture</p>"},{"location":"AXMap/AXMap-other/#parameters","title":"Parameters","text":"Name Data Type Description <code>imgUrl</code> string Source image address <code>obstacle</code> object Obstacle RGBA color valueExample: <code>{r: 42, g:124, b:128, a:255}</code> <code>throughArea</code> object Passable area load RGBA color value <code>other</code> object other area RGBA color value"},{"location":"AXMap/AXMap-other/#return-value-promisestring","title":"Return Value <code>Promise.&lt;string&gt;</code>","text":"<p>The beautified image address</p>"},{"location":"AXMap/AXMap-other/#example","title":"Example","text":"<p>```javascript ... const newImg = await axMap.beautifyMapImg(\"\", {...}, {...}, {...}); ... ````"},{"location":"AXMap/AXMap-other/#projectcoordinates-arraynumber","title":"<code>project(coordinates) -&gt; {array.&lt;number&gt;}</code>","text":"<p>Convert map coordinates to pixel offsets</p>"},{"location":"AXMap/AXMap-other/#parameters_1","title":"Parameters","text":"Name Data Type Description <code>coordinates</code> array map coordinates [x, y]"},{"location":"AXMap/AXMap-other/#return-value-arraynumber","title":"Return Value <code>array.&lt;number&gt;</code>","text":"<p>Converted pixel offset</p>"},{"location":"AXMap/AXMap-other/#example_1","title":"Example","text":"<p>```javascript ... const pixel = axMap.project([0, 0]); ... ````</p>"},{"location":"AXMap/AXMap-other/#destroy-void","title":"<code>destroy() -&gt; {void}</code>","text":"<p>destroy map object</p>"},{"location":"AXMap/AXMap-other/#parameters_2","title":"Parameters","text":"<p>none</p>"},{"location":"AXMap/AXMap-other/#return-value","title":"Return Value","text":"<p>none</p>"},{"location":"AXMap/AXMap-other/#example_2","title":"Example","text":"<p>```javascript ... axMap.destroy(); ... ````</p>"},{"location":"AXMap/AXMap-overlay/","title":"Overlay Operation","text":""},{"location":"AXMap/AXMap-overlay/#addpointcoordinates-properties-opt-string","title":"<code>addPoint(coordinates, properties opt) -&gt; {string}</code>","text":"<p>Add points to the map</p>"},{"location":"AXMap/AXMap-overlay/#parameters","title":"Parameters","text":"Name Data Type Description <code>coordinates</code> number[] point coordinates [x, y] <code>properties</code> object optional; custom properties"},{"location":"AXMap/AXMap-overlay/#return-value-string","title":"Return value <code>string</code>","text":"<p>feature identifier of the added point</p>"},{"location":"AXMap/AXMap-overlay/#example","title":"Example","text":"<p>```javascript ... axMap.addPoint([0, 0], {   name: \"test\", // name   color: \"#f00\", // color   radius: 2, // radius, unit: pixel   yaw: 0, // facing angle   enableSelect: true // whether to allow selection }); ... ````</p>"},{"location":"AXMap/AXMap-overlay/#addlinecoordinates-properties-opt-string","title":"<code>addLine(coordinates, properties opt) -&gt; {string}</code>","text":"<p>Add lines to the map</p>"},{"location":"AXMap/AXMap-overlay/#parameters_1","title":"Parameters","text":"Name Data Type Description <code>coordinates</code> array[] array of point coordinates on the line <code>properties</code> object optional; custom properties"},{"location":"AXMap/AXMap-overlay/#return-value-string_1","title":"Return value <code>string</code>","text":"<p>The feature ID of the added line</p>"},{"location":"AXMap/AXMap-overlay/#example_1","title":"Example","text":"<p>```javascript ... axMap.addLine([[0, 0], [10, 10], {   color: \"#f00\", // color   width: 2, // width, unit: pixel   dash: 'dash' // dashed line }); ... ````</p>"},{"location":"AXMap/AXMap-overlay/#addmarkerimgsrc-coordinates-yaw-any","title":"<code>addMarker(imgSrc, coordinates, yaw) -&gt; {any}</code>","text":"<p>Add a marker to the map</p>"},{"location":"AXMap/AXMap-overlay/#parameters_2","title":"Parameters","text":"Name Data Type Description <code>imgSrc</code> string Image address <code>coordinates</code> number[] coordinates [x, y] <code>yaw</code> number facing angle"},{"location":"AXMap/AXMap-overlay/#return-value-any","title":"Return value <code>any</code>","text":"<p>marker object</p>"},{"location":"AXMap/AXMap-overlay/#example_2","title":"Example","text":"<p>```javascript ... const marker = axMap.addMarker(\"\", [0, 0], 0); ... ````"},{"location":"AXMap/AXMap-overlay/#setmarkerpropertiesmarker-coordinates-yaw-void","title":"<code>setMarkerProperties(marker, coordinates, yaw) -&gt; {void}</code>","text":"<p>Set marker properties</p>"},{"location":"AXMap/AXMap-overlay/#parameters_3","title":"Parameters","text":"Name Data Type Description <code>marker</code> any marker object <code>coordinates</code> number[] new coordinates [x, y] <code>yaw</code> number new heading angle"},{"location":"AXMap/AXMap-overlay/#return-value","title":"return value","text":"<p>none</p>"},{"location":"AXMap/AXMap-overlay/#example_3","title":"Example","text":"<p>```javascript ... axMap.setMarkerProperties(marker, [1, 1], 0); ... ````</p>"},{"location":"AXMap/AXMap-overlay/#removemarkermarker-void","title":"<code>removeMarker(marker) -&gt; {void}</code>","text":"<p>remove marker from map</p>"},{"location":"AXMap/AXMap-overlay/#parameters_4","title":"Parameters","text":"Name Data Type Description <code>marker</code> any Marker object"},{"location":"AXMap/AXMap-overlay/#return-value_1","title":"return value","text":"<p>none</p>"},{"location":"AXMap/AXMap-overlay/#example_4","title":"Example","text":"<p>```javascript ... axMap.removeMarker(marker); ... ````</p>"},{"location":"AXMap/AXMap-saveCruise/","title":"Setting/Update Cruise Route","text":""},{"location":"AXMap/AXMap-saveCruise/#savecruisecruiseinfo-promiseboolean","title":"<code>saveCruise(cruiseInfo) -&gt; {Promise&lt;boolean&gt;}</code>","text":"<p>Setting/Update Cruise Route</p>"},{"location":"AXMap/AXMap-saveCruise/#parameters","title":"Parameters","text":"Name Data Type Description <code>cruiseInfo</code> CruiseInfo Cruise Route Information"},{"location":"AXMap/AXMap-saveCruise/#return-value-promiseboolean","title":"Return value <code>Promise.&lt;boolean&gt;</code>","text":"<p>whether succeed</p> <ul> <li>true - success</li> <li>false - fail</li> </ul>"},{"location":"AXMap/AXMap-saveCruise/#example","title":"Example","text":"<pre><code>...\nlet cruiseInfo = {\n    id: 12,\n    name: \"test-cruise\",\n    businessId: \"\",\n    sites: [{\n        poiId: \"6423afdb1162805312f27a75\",\n        poiName: \"test-poi\"\n    }],\n    remark: \"\"\n}\nconst success = await axRobot.saveCruise(cruiseInfo);\n...\n</code></pre>"},{"location":"AXMap/AXMap-syncCruiseCloud/","title":"Synchronize cloud cruise routes","text":""},{"location":"AXMap/AXMap-syncCruiseCloud/#synccruisecloudbusinessid-promiseboolean","title":"<code>syncCruiseCloud(businessId) -&gt; {Promise&lt;boolean&gt;}</code>","text":"<p>Synchronize cloud cruise routes</p>"},{"location":"AXMap/AXMap-syncCruiseCloud/#parameters","title":"Parameters","text":"Name Data Type Description <code>businessId</code> string Business Id"},{"location":"AXMap/AXMap-syncCruiseCloud/#return-value-promiseboolean","title":"Return value <code>Promise.&lt;boolean&gt;</code>","text":"<p>whether succeed</p> <ul> <li>true - success</li> <li>false - fail</li> </ul>"},{"location":"AXMap/AXMap-syncCruiseCloud/#example","title":"Example","text":"<pre><code>...\nconst success = await axRobot.syncCruiseCloud(businessId);\n...\n</code></pre>"},{"location":"AXMap/AXMap-syncCruiseLocal/","title":"Local upload to the cloud cruise routes","text":""},{"location":"AXMap/AXMap-syncCruiseLocal/#synccruiselocal-promiseboolean","title":"<code>syncCruiseLocal() -&gt; {Promise&lt;boolean&gt;}</code>","text":"<p>Local upload to the cloud cruise routes</p>"},{"location":"AXMap/AXMap-syncCruiseLocal/#parameters","title":"Parameters","text":"<p>none</p>"},{"location":"AXMap/AXMap-syncCruiseLocal/#return-value-promiseboolean","title":"Return value <code>Promise.&lt;boolean&gt;</code>","text":"<p>whether succeed</p> <ul> <li>true - success</li> <li>false - fail</li> </ul>"},{"location":"AXMap/AXMap-syncCruiseLocal/#example","title":"Example","text":"<pre><code>...\nconst success = await axRobot.syncCruiseLocal();\n...\n</code></pre>"},{"location":"AXRobot/AXRobot-beginControl/","title":"Begin Control Motion","text":""},{"location":"AXRobot/AXRobot-beginControl/#begincontrol-void","title":"<code>beginControl() -&gt; {void}</code>","text":"<p>Turn on robot movement control</p>"},{"location":"AXRobot/AXRobot-beginControl/#parameters","title":"Parameters","text":"<p>none</p>"},{"location":"AXRobot/AXRobot-beginControl/#return-value","title":"Return Value","text":"<p>none</p>"},{"location":"AXRobot/AXRobot-beginControl/#example","title":"Example","text":"<p>```javascript ... axRobot.beginControl(); ... ````</p>"},{"location":"AXRobot/AXRobot-boxDoor/","title":"Cabin Door Control","text":""},{"location":"AXRobot/AXRobot-boxDoor/#methods","title":"Methods","text":""},{"location":"AXRobot/AXRobot-boxDoor/#openboxdoordoorids-mode-promiseboolean","title":"<code>openBoxDoor(doorIds, mode) \u2192 {Promise.&lt;boolean&gt;}</code>","text":"<p>Open the box door</p>"},{"location":"AXRobot/AXRobot-boxDoor/#parameters","title":"Parameters","text":"Name Type Required Description <code>doorIds</code> number[] Yes A list of door numbers, ranging from 1 to 4. <code>mode</code> number no Execution mode: 1=host computer, 2=chassis; default: 1."},{"location":"AXRobot/AXRobot-boxDoor/#return-value-promiseboolean","title":"Return value <code>Promise.&lt;boolean&gt;</code>","text":"<p>whether succeed</p> <ul> <li><code>true</code> - success</li> <li><code>false</code> - fail</li> </ul>"},{"location":"AXRobot/AXRobot-boxDoor/#example","title":"Example","text":"<pre><code>...\n// Open the door of box 1\nconst success = await axRobot.openBoxDoor([1], 1);\n...\n</code></pre>"},{"location":"AXRobot/AXRobot-boxDoor/#closeboxdoordoorids-mode-promiseboolean","title":"<code>closeBoxDoor(doorIds, mode) \u2192 {Promise.&lt;boolean&gt;}</code>","text":"<p>close the door</p>"},{"location":"AXRobot/AXRobot-boxDoor/#parameters_1","title":"Parameters","text":"Name Type Required Description <code>doorIds</code> number[] Yes A list of door numbers, ranging from 1 to 4. <code>mode</code> number no Execution mode: 1=host computer, 2=chassis; default: 1."},{"location":"AXRobot/AXRobot-boxDoor/#return-value-promiseboolean_1","title":"Return value <code>Promise.&lt;boolean&gt;</code>","text":"<p>whether succeed</p> <ul> <li><code>true</code> - success</li> <li><code>false</code> - fail</li> </ul>"},{"location":"AXRobot/AXRobot-boxDoor/#example_1","title":"Example","text":"<pre><code>...\n// close door 2\nconst success = await axRobot.closeBoxDoor([2], 1);\n...\n</code></pre>"},{"location":"AXRobot/AXRobot-cancelTask/","title":"Cancel Task","text":""},{"location":"AXRobot/AXRobot-cancelTask/#methods","title":"Methods","text":""},{"location":"AXRobot/AXRobot-cancelTask/#canceltask-promiseboolean","title":"<code>cancelTask() -&gt; {Promise.&lt;boolean&gt;}</code>","text":"<p>Cancel the currently executing task.</p>"},{"location":"AXRobot/AXRobot-cancelTask/#return-value-promiseboolean","title":"Return value <code>Promise.&lt;boolean&gt;</code>","text":"<p>whether succeed</p> <ul> <li><code>true</code> - success</li> <li><code>false</code> - fail</li> </ul>"},{"location":"AXRobot/AXRobot-cancelTask/#example","title":"Example","text":"<pre><code>...\nconst success = await axRobot.cancelTask();\n...\n</code></pre>"},{"location":"AXRobot/AXRobot-connectRobot/","title":"Connect","text":""},{"location":"AXRobot/AXRobot-connectRobot/#connectrobotreq-promise","title":"<code>connectRobot(req) -&gt; {Promise}</code>","text":"<p>Connect the robot</p>"},{"location":"AXRobot/AXRobot-connectRobot/#parameters","title":"Parameters","text":"Name Data Type Description <code>req</code> ReqConnect connection parameters"},{"location":"AXRobot/AXRobot-connectRobot/#return-value-promise","title":"Return value <code>Promise</code>","text":"<p>none</p>"},{"location":"AXRobot/AXRobot-connectRobot/#example","title":"Example","text":"<p>``` javascript // Initialize the robot operation instance ... try {    const res = await axRobot.connectRobot({      robotId: \"\"    }); <p>console.log(\"connect success: \" + res.robotId);    // do something } catch(err) {    console.log(err.errText); } ````</p>"},{"location":"AXRobot/AXRobot-continueTask/","title":"Continue Task","text":""},{"location":"AXRobot/AXRobot-continueTask/#methods","title":"Methods","text":""},{"location":"AXRobot/AXRobot-continueTask/#continuetask-promiseboolean","title":"<code>continueTask() -&gt; {Promise.&lt;boolean&gt;}</code>","text":"<p>Resume an ongoing task.</p>"},{"location":"AXRobot/AXRobot-continueTask/#return-value-promiseboolean","title":"Return value <code>Promise.&lt;boolean&gt;</code>","text":"<p>whether succeed</p> <ul> <li><code>true</code> - success</li> <li><code>false</code> - fail</li> </ul>"},{"location":"AXRobot/AXRobot-continueTask/#example","title":"Example","text":"<pre><code>...\nconst success = await axRobot.continueTask();\n...\n</code></pre>"},{"location":"AXRobot/AXRobot-createMap/","title":"Create Map","text":""},{"location":"AXRobot/AXRobot-createMap/#createmapcontainerid-backgroundcolor-opt-promiseaxmap","title":"<code>createMap(containerId, backgroundColor opt) -&gt; {Promise.&lt;AXMap&gt;}</code>","text":"<p>Create a map</p>"},{"location":"AXRobot/AXRobot-createMap/#parameters","title":"Parameters","text":"Name Data Type Description <code>containerId</code> string HTML tag ID of the display container for the map <code>backgroundColor</code> string optional; map background color <code>glyphs</code> string optional; map fonts"},{"location":"AXRobot/AXRobot-createMap/#return-value-promiseaxmap","title":"Return value <code>Promise.&lt;AXMap&gt;</code>","text":"<p>map instance</p>"},{"location":"AXRobot/AXRobot-createMap/#example","title":"Example","text":"<p>```javascript ... const map = await axRobot.createMap(\"map\", \"#eeeeee\"); ...  ````</p>"},{"location":"AXRobot/AXRobot-destroy/","title":"Destroy","text":""},{"location":"AXRobot/AXRobot-destroy/#destroy-void","title":"<code>destroy() -&gt; {void}</code>","text":"<p>Destroy robot operation instance</p>"},{"location":"AXRobot/AXRobot-destroy/#parameters","title":"Parameters","text":"<p>none</p>"},{"location":"AXRobot/AXRobot-destroy/#return-value","title":"Return Value","text":"<p>none</p>"},{"location":"AXRobot/AXRobot-destroy/#example","title":"Example","text":"<p>```javascript ... axRobot.destroy(); ... ````</p>"},{"location":"AXRobot/AXRobot-endControl/","title":"End Control Motion","text":""},{"location":"AXRobot/AXRobot-endControl/#endcontrol-void","title":"<code>endControl() -&gt; {void}</code>","text":"<p>Turn off robot movement control</p>"},{"location":"AXRobot/AXRobot-endControl/#parameters","title":"Parameters","text":"<p>none</p>"},{"location":"AXRobot/AXRobot-endControl/#return-value","title":"Return Value","text":"<p>none</p>"},{"location":"AXRobot/AXRobot-endControl/#example","title":"Example","text":"<p>```javascript ... axRobot.endControl(); ... ````</p>"},{"location":"AXRobot/AXRobot-getAreaList/","title":"Get List Of Area","text":""},{"location":"AXRobot/AXRobot-getAreaList/#getarealist-promiseany","title":"<code>getAreaList() -&gt; {Promise.&lt;any&gt;}</code>","text":"<p>Get a list of regions</p>"},{"location":"AXRobot/AXRobot-getAreaList/#parameters","title":"Parameters","text":"<p>none</p>"},{"location":"AXRobot/AXRobot-getAreaList/#return-value-promiseany","title":"Return value <code>Promise.&lt;any&gt;</code>","text":"<p>area list</p>"},{"location":"AXRobot/AXRobot-getAreaList/#example","title":"Example","text":"<p>```javascript ... const result = await axRobot.getAreaList();</p> <p>const data = result.data console.log(data.count); // number of map areas console.log(data.list); // map area list data.list.forEach(area =&gt; {    console.log(area.id); // area ID    console.log(area.buildingId); // The building ID of the area    console.log(area.businessId); // The business ID of the area    console.log(area.name); // area name    console.log(area.floor); // area is on floor    console.log(area.createTime); // area creation time }); ... ````</p>"},{"location":"AXRobot/AXRobot-getAreaPic/","title":"Get Area Basemap","text":""},{"location":"AXRobot/AXRobot-getAreaPic/#getareapicareaid-promiseany","title":"<code>getAreaPic(areaId) -&gt; {Promise.&lt;any&gt;}</code>","text":"<p>Get area map image</p>"},{"location":"AXRobot/AXRobot-getAreaPic/#parameters","title":"Parameters","text":"Name Data Type Description <code>areaId</code> string area ID"},{"location":"AXRobot/AXRobot-getAreaPic/#return-value-promiseany","title":"Return value <code>Promise.&lt;any&gt;</code>","text":"<p>Regional map image data stream</p>"},{"location":"AXRobot/AXRobot-getAreaPic/#example","title":"Example","text":"<p>```javascript ... const mapData = await axRobot.getAreaPic(\"\"); ... ````"},{"location":"AXRobot/AXRobot-getBusinessId/","title":"Get Robot Business ID","text":""},{"location":"AXRobot/AXRobot-getBusinessId/#getbusinessidmode-promisestring","title":"<code>getBusinessId(mode) -&gt; {Promise.&lt;string&gt;}</code>","text":"<p>Get business ID of the robot</p>"},{"location":"AXRobot/AXRobot-getBusinessId/#parameters","title":"Parameters","text":"Name Type Description <code>mode</code> number Optional; The mode of the robot"},{"location":"AXRobot/AXRobot-getBusinessId/#return-value-promisestring","title":"Return Value <code>Promise.&lt;string&gt;</code>","text":"<p>The business ID</p>"},{"location":"AXRobot/AXRobot-getBusinessId/#example","title":"Example","text":"<pre><code>...\nconst businessId = await axRobot.getBusinessId();\n...\n</code></pre>"},{"location":"AXRobot/AXRobot-getCurrentTask/","title":"Get Current Task","text":""},{"location":"AXRobot/AXRobot-getCurrentTask/#getcurrenttask-promiseany","title":"<code>getCurrentTask() -&gt; {Promise.&lt;any&gt;}</code>","text":"<p>Get information about the currently executing task.</p>"},{"location":"AXRobot/AXRobot-getCurrentTask/#return-value-promiseany","title":"Return value <code>Promise.&lt;any&gt;</code>","text":"Name Type Description <code>task</code> any task information"},{"location":"AXRobot/AXRobot-getCurrentTask/#example","title":"Example","text":"<pre><code>...\nlet task = await axRobot.getCurrentTask();\nconsole.log(task.isCancel); // Whether the task has been canceled\nconsole.log(task.runType); // run type; 0-timed disinfecting 1-temporary disinfecting 20-fast meal delivery 21-multi-point meal delivery 22-leading 23-cruising 24-returning 25-returning to pile charging\nconsole.log(task.businessId); // The business ID to which the task belongs\nconsole.log(task.robotId); // Robot ID\nconsole.log(task.buildingId); // building ID\nconsole.log(task.isExecute); // Whether it has been executed\nconsole.log(task.taskType); // task type; 0-disinfect 1-recharge pile 2-restaurant\nconsole.log(task.taskPts); // Task node information, please refer to the description of starting the task execution\nconsole.log(task.createTime); // task creation time\nconsole.log(task.runNum); // The number of times the task is run\nconsole.log(task.name); // task name\nconsole.log(task.busiType); // business type\nconsole.log(task.isDel); // Is it deleted\nconsole.log(task.taskId); // task ID\n...\n</code></pre>"},{"location":"AXRobot/AXRobot-getEffectiveAreaList/","title":"Get Effective Area List","text":""},{"location":"AXRobot/AXRobot-getEffectiveAreaList/#geteffectivearealist-promiseany","title":"<code>getEffectiveAreaList() -&gt; {Promise.&lt;any&gt;}</code>","text":"<p>Get effective area list</p>"},{"location":"AXRobot/AXRobot-getEffectiveAreaList/#parameters","title":"Parameters","text":"<p>None</p>"},{"location":"AXRobot/AXRobot-getEffectiveAreaList/#return-value-promiseany","title":"Return Value <code>Promise.&lt;any&gt;</code>","text":"Field Name Type Description <code>status</code> number Response status code200 - Success400 - Failed parameters500 - Service internal error <code>message</code> string Response status description <code>data</code> object Response data <code>data.effective</code> array The list of effective areas - actual floor <code>data.ineffective</code> array The list of ineffective areas - actual floor <code>data.effectiveFloorNames</code> array The list of effective area - show floor <code>data.ineffectiveFloorNames</code> array The list of ineffective areas - show floor <pre><code>{\n  \"status\": 200,\n  \"message\": \"ok\",\n  \"data\": {\n    \"effective\": [-1, 1, 3],\n    \"ineffective\": [-2, 2, 5, 6, 7],\n    \"effectiveName\": [-1, 1, 3],\n    \"ineffectiveName\": [-2, 2, 5, 6, 7]\n  }\n}\n</code></pre>"},{"location":"AXRobot/AXRobot-getEffectiveAreaList/#example","title":"Example","text":"<pre><code>...\nconst result = await getEffectiveAreaList();\n// todo someting\n...\n</code></pre>"},{"location":"AXRobot/AXRobot-getPlaceList/","title":"Get Current Area Sites","text":""},{"location":"AXRobot/AXRobot-getPlaceList/#getplacelist-any","title":"<code>getPlaceList() -&gt; {any}</code>","text":"<p>Get a list of current regional sites</p>"},{"location":"AXRobot/AXRobot-getPlaceList/#parameters","title":"Parameters","text":"<p>none</p>"},{"location":"AXRobot/AXRobot-getPlaceList/#return-value-any","title":"Return value <code>any</code>","text":"<p>site list</p>"},{"location":"AXRobot/AXRobot-getPlaceList/#example","title":"Example","text":"<p>```javascript ... const list = axRobot.getPlaceList(); ... ````</p>"},{"location":"AXRobot/AXRobot-getPoiList/","title":"Get All Sites","text":""},{"location":"AXRobot/AXRobot-getPoiList/#getpoilistreq-promiseany","title":"<code>getPoiList(req) -&gt; {Promise.&lt;any&gt;}</code>","text":"<p>Get site list</p>"},{"location":"AXRobot/AXRobot-getPoiList/#parameters","title":"Parameters","text":"Name Data Type Description <code>req</code> \u200b\u200bRequestParam Request parameters"},{"location":"AXRobot/AXRobot-getPoiList/#return-value-promiseany","title":"Return value <code>Promise.&lt;any&gt;</code>","text":"<p>site list</p>"},{"location":"AXRobot/AXRobot-getPoiList/#example","title":"Example","text":"<p>```javascript ... const result = await getPoiList({   robotId: \"\" }); <p>console.log(result.count); // total number of eligible POIs console.log(result.list); // site list result.list.forEach(poi =&gt; {   console.log(poi.areaId); // ID of the area where the site is located   console.log(poi.buildingId); // ID of the building where the site is located   console.log(poi.businessId); // ID of the business to which the site belongs   console.log(poi.floor); // The floor where the site is located   console.log(poi.id); // site ID   console.log(poi.name); // site name   console.log(poi.type); // site type   console.log(poi.coordinates); // station coordinates in the format [x, y]; eg [13.411045089526397,-6.95027412476179]   console.log(poi.yaw); // The angle value of the site's orientation Unit: degrees }); ... ````</p>"},{"location":"AXRobot/AXRobot-getRobotId/","title":"Get Robot ID","text":""},{"location":"AXRobot/AXRobot-getRobotId/#getrobotid-string","title":"<code>getRobotId() -&gt; {string}</code>","text":"<p>Get the ID of the currently connected robot</p>"},{"location":"AXRobot/AXRobot-getRobotId/#parameters","title":"Parameters","text":"<p>none</p>"},{"location":"AXRobot/AXRobot-getRobotId/#return-value-string","title":"Return value <code>string</code>","text":"<p>Robot logo</p>"},{"location":"AXRobot/AXRobot-getRobotId/#example","title":"Example","text":"<p>```javascript ... const robotId = axRobot.getRobotId(); ... ````</p>"},{"location":"AXRobot/AXRobot-getRobotOwnCharges/","title":"Get Bound Charging Pile","text":""},{"location":"AXRobot/AXRobot-getRobotOwnCharges/#getrobotowncharges-promiseany","title":"<code>getRobotOwnCharges() -&gt; {Promise.&lt;any&gt;}</code>","text":"<p>Get the list of charging piles bound to the robot</p>"},{"location":"AXRobot/AXRobot-getRobotOwnCharges/#parameters","title":"Parameters","text":"<p>none</p>"},{"location":"AXRobot/AXRobot-getRobotOwnCharges/#return-value-promiseany","title":"Return value <code>Promise.&lt;any&gt;</code>","text":"<p>Charging pile list</p>"},{"location":"AXRobot/AXRobot-getRobotOwnCharges/#example","title":"Example","text":"<p>```javascript ... const charges = await axRobot.getRobotOwnCharges();</p> <p>console.log(charges.count); // number of charging piles console.log(charges.list); // charging pile list charges.list.forEach(chargingPile =&gt; {    console.log(chargingPile.areaId); // The identification of the area where the charging pile is located    console.log(chargingPile.buildingId); // ID of the building where the charging pile is located    console.log(chargingPile.businessId); // ID of the business to which the charging pile belongs    console.log(chargingPile.floor); // The floor where the charging pile is located    console.log(chargingPile.id); // Charging Pile ID    console.log(chargingPile.name); // charging pile name    console.log(chargingPile.coordinate); // The coordinates of the charging pile, the format is [x, y]; such as [13.411045089526397,-6.95027412476179]    console.log(chargingPile.yaw); // The angle value of charging pile facing Unit: degree }); ... ````</p>"},{"location":"AXRobot/AXRobot-getRouteMode/","title":"Get Network Mode","text":""},{"location":"AXRobot/AXRobot-getRouteMode/#getroutemode-promisestring","title":"<code>getRouteMode() -&gt; {Promise.&lt;string&gt;}</code>","text":"<p>Get Robot Network Mode</p>"},{"location":"AXRobot/AXRobot-getRouteMode/#parameters","title":"Parameters","text":"<p>none</p>"},{"location":"AXRobot/AXRobot-getRouteMode/#return-value-promisestring","title":"Return value <code>Promise.&lt;string&gt;</code>","text":"<p>Network Mode</p>"},{"location":"AXRobot/AXRobot-getRouteMode/#example","title":"Example","text":"<pre><code>const mode = await axRobot.getRouteMode();\nconsole.log(mode); \n</code></pre> <ul> <li>explain: Return value\uff1aetho_first: \"Head shell WIFI network supply\"/\"Head shell 4G network supply\"(you can judge by yourself according to whether the head shell is connected to wifi), wlan0_first: \"Chassis WIFI network supply\", usbo_first: \"Chassis 4G network supply\"</li> </ul>"},{"location":"AXRobot/AXRobot-getState/","title":"Get Current State Of The Robot","text":""},{"location":"AXRobot/AXRobot-getState/#getstate-promiseany","title":"<code>getState() -&gt; {Promise.&lt;any&gt;}</code>","text":"<p>Get the current state of the robot at a time</p>"},{"location":"AXRobot/AXRobot-getState/#parameters","title":"Parameters","text":"<p>none</p>"},{"location":"AXRobot/AXRobot-getState/#return-value-promiseany","title":"Return value <code>Promise.&lt;any&gt;</code>","text":"<p>The current state of the robot</p>"},{"location":"AXRobot/AXRobot-getState/#example","title":"Example","text":"<p>```javascript ... const state = await axRobot.getState(); console.log(state.isManualMode); // whether to push the mode console.log(state.isTasking); // Whether the task is being executed console.log(state.isCharging); // is charging console.log(state.isRemoteMode); // Whether remote control console.log(state.battery); // current battery (percentage) console.log(state.robotId); // Robot ID console.log(state.speed); // current speed (m/s) console.log(state.areaId); // current area ID console.log(state.isEmergencyStop); // Whether emergency stop state console.log(state.x); // x component of position coordinates console.log(state.y); // y component of position coordinates console.log(state.yaw); // current angle (radians) console.log(state.locQuality); // Current positioning quality (0-100) console.log(state.hasObstruction); // Is there an obstacle currently console.log(state.errors); // fault code console.log(state.isGoHome); // Whether it is returning to the pile for charging console.log(state.timestamp); // timestamp of robot state</p> <p>// do something ... ````</p>"},{"location":"AXRobot/AXRobot-getVersion/","title":"Get SDK Version","text":""},{"location":"AXRobot/AXRobot-getVersion/#getversion-string","title":"<code>getVersion() -&gt; {string}</code>","text":"<p>Get SDK version number</p>"},{"location":"AXRobot/AXRobot-getVersion/#parameters","title":"Parameters","text":"<p>none</p>"},{"location":"AXRobot/AXRobot-getVersion/#return-value-string","title":"Return value <code>string</code>","text":"<p>SDK version number string</p>"},{"location":"AXRobot/AXRobot-getVersion/#example","title":"Example","text":"<p>```javascript const version = axRobot.getVersion(); console.log(version); ````</p>"},{"location":"AXRobot/AXRobot-goHome/","title":"Back To Charge","text":""},{"location":"AXRobot/AXRobot-goHome/#gohomepose-promiseboolean","title":"<code>goHome(pose) -&gt; {Promise.&lt;boolean&gt;}</code>","text":"<p>Control the robot back to the charging pile</p>"},{"location":"AXRobot/AXRobot-goHome/#parameters","title":"Parameters","text":"Name Data Type Description <code>pose</code> Pose pose"},{"location":"AXRobot/AXRobot-goHome/#return-value-promiseboolean","title":"Return Value <code>Promise.&lt;boolean&gt;</code>","text":"<p>whether succeed</p> <ul> <li><code>true</code> - success</li> <li><code>false</code> - fail</li> </ul>"},{"location":"AXRobot/AXRobot-goHome/#example","title":"Example","text":"<p>```javascript ... axRobot.goHome({    x: 0,    y: 0,    yaw: 0 }); ... ````</p>"},{"location":"AXRobot/AXRobot-init/","title":"Initialize","text":""},{"location":"AXRobot/AXRobot-init/#init-promiseboolean","title":"<code>init() -&gt; {Promise.&lt;boolean&gt;}</code>","text":"<p>Initialize the instance</p>"},{"location":"AXRobot/AXRobot-init/#return-value-promiseboolean","title":"Return value <code>Promise.&lt;boolean&gt;</code>","text":"<p>Whether the initialization was successful</p> <ul> <li><code>true</code> - success</li> <li><code>fales</code> - failures</li> </ul>"},{"location":"AXRobot/AXRobot-init/#example","title":"Example","text":"<p>```javascript import { AXRobot, AppMode } from \"@autoxing/robot-js-sdk\";</p> <p>const axRobot = new AXRobot(\"\", \"\", AppMode.WAN_APP); const successed = await axRobot.init(); if (successed) {    // Initialization successful    ... } else {    // initialization failed    ... } ````"},{"location":"AXRobot/AXRobot-lightBelt/","title":"Light Belt Control","text":""},{"location":"AXRobot/AXRobot-lightBelt/#methods","title":"Methods","text":""},{"location":"AXRobot/AXRobot-lightBelt/#openlightbeltlightbelt-promiseboolean","title":"<code>openLightBelt(lightBelt) \u2192 {Promise.&lt;boolean&gt;}</code>","text":"<p>Turn on the light strip</p>"},{"location":"AXRobot/AXRobot-lightBelt/#parameters","title":"Parameters","text":"Name Type Description <code>lightBelt</code> LightBelt"},{"location":"AXRobot/AXRobot-lightBelt/#return-value-promiseboolean","title":"Return value <code>Promise.&lt;boolean&gt;</code>","text":"<p>whether succeed</p> <ul> <li><code>true</code> - success</li> <li><code>false</code> - fail</li> </ul>"},{"location":"AXRobot/AXRobot-lightBelt/#example","title":"Example","text":"<pre><code>...\nlet lightBelt = {\n  mode: 1,\n  color: LightColor.Green,\n  indexes: [\n    { index: 0, num: 6 }\n  ]\n}\nconst success = await axRobot.openLightBelt(lightBelt);\n...\n</code></pre>"},{"location":"AXRobot/AXRobot-lightBelt/#closelightbeltlightbelt-promiseboolean","title":"<code>closeLightBelt(lightBelt) \u2192 {Promise.&lt;boolean&gt;}</code>","text":"<p>Turn off the light strip</p>"},{"location":"AXRobot/AXRobot-lightBelt/#parameters_1","title":"Parameters","text":"Name Type Description <code>lightBelt</code> LightBelt"},{"location":"AXRobot/AXRobot-lightBelt/#return-value-promiseboolean_1","title":"Return value <code>Promise.&lt;boolean&gt;</code>","text":"<p>whether succeed</p> <ul> <li><code>true</code> - success</li> <li><code>false</code> - fail</li> </ul>"},{"location":"AXRobot/AXRobot-lightBelt/#example_1","title":"Example","text":"<pre><code>...\nlet lightBelt = {\nmode: 1,\n  color: LightColor.Green,\nindexes: [\n    { index: 0, num: 6 }\n  ]\n}\nconst success = await axRobot.closeLightBelt(lightBelt);\n...\n</code></pre>"},{"location":"AXRobot/AXRobot-motionControl/","title":"Complex Motion","text":""},{"location":"AXRobot/AXRobot-motionControl/#motioncontrollinearvelocity-angularvelocity-void","title":"<code>motionControl(linearVelocity, angularVelocity) -&gt; {void}</code>","text":"<p>control robot movement</p>"},{"location":"AXRobot/AXRobot-motionControl/#parameters","title":"Parameters","text":"Name Data Type Description <code>linearVelocity</code> number moving linear velocity <code>angularVelocity</code> number angular velocity of movement"},{"location":"AXRobot/AXRobot-motionControl/#return-value","title":"Return Value","text":"<p>none</p>"},{"location":"AXRobot/AXRobot-motionControl/#example","title":"Example","text":"<p>```javascript ... axRobot.motionControl(0.1, 0.2); ... ````</p>"},{"location":"AXRobot/AXRobot-motionFor/","title":"Simple Motion","text":""},{"location":"AXRobot/AXRobot-motionFor/#motionfortype-void","title":"<code>motionFor(type) -&gt; {void}</code>","text":"<p>Robot motion control</p>"},{"location":"AXRobot/AXRobot-motionFor/#parameters","title":"Parameters","text":"Name Data Type Description <code>type</code> MotionType motion type"},{"location":"AXRobot/AXRobot-motionFor/#return-value","title":"Return Value","text":"<p>none</p>"},{"location":"AXRobot/AXRobot-motionFor/#example","title":"Example","text":"<p>```javascript ... axRobot.motionFor(MotionType.Forward); ... ````</p>"},{"location":"AXRobot/AXRobot-moveTo/","title":"Fixed-Point Motion","text":""},{"location":"AXRobot/AXRobot-moveTo/#movetopose-void","title":"<code>moveTo(pose) -&gt; {void}</code>","text":"<p>The robot moves to the specified position</p>"},{"location":"AXRobot/AXRobot-moveTo/#parameters","title":"Parameters","text":"Name Data Type Description <code>pose</code> Pose pose"},{"location":"AXRobot/AXRobot-moveTo/#return-value","title":"Return Value","text":"<p>none</p>"},{"location":"AXRobot/AXRobot-moveTo/#example","title":"Example","text":"<p>```javascript ... axRobot.moveTo({    x: 0,    y: 0,    yaw: 0 }); ... ````</p>"},{"location":"AXRobot/AXRobot-pauseTask/","title":"Pause Task","text":""},{"location":"AXRobot/AXRobot-pauseTask/#methods","title":"Methods","text":""},{"location":"AXRobot/AXRobot-pauseTask/#pausetask-promiseboolean","title":"<code>pauseTask() -&gt; {Promise.&lt;boolean&gt;}</code>","text":"<p>Pause an ongoing task.</p>"},{"location":"AXRobot/AXRobot-pauseTask/#return-value-promiseboolean","title":"Return value <code>Promise.&lt;boolean&gt;</code>","text":"<p>whether succeed</p> <ul> <li><code>true</code> - success</li> <li><code>false</code> - fail</li> </ul>"},{"location":"AXRobot/AXRobot-pauseTask/#example","title":"Example","text":"<pre><code>...\nconst success = await axRobot.pauseTask();\n...\n</code></pre>"},{"location":"AXRobot/AXRobot-removeWheelOverload/","title":"Remove Wheel Overload","text":""},{"location":"AXRobot/AXRobot-removeWheelOverload/#removewheeloverload-promiseboolean","title":"<code>removeWheelOverload() -&gt; {Promise.&lt;boolean&gt;}</code>","text":"<p>Remove wheel overload</p>"},{"location":"AXRobot/AXRobot-removeWheelOverload/#parameters","title":"Parameters","text":"<p>None</p>"},{"location":"AXRobot/AXRobot-removeWheelOverload/#return-value-promiseboolean","title":"Return Value <code>Promise.&lt;boolean&gt;</code>","text":"<p>Whether the execution is successful</p> <ul> <li><code>true</code> - success</li> <li><code>false</code> - fail</li> </ul>"},{"location":"AXRobot/AXRobot-removeWheelOverload/#example","title":"Example","text":"<pre><code>...\nconst success = await axRobot.removeWheelOverload();\n...\n</code></pre>"},{"location":"AXRobot/AXRobot-resetMap/","title":"Reset Map","text":""},{"location":"AXRobot/AXRobot-resetMap/#resetmapareaid-promiseboolean","title":"<code>resetMap(areaId) -&gt; {Promise.&lt;boolean&gt;}</code>","text":"<p>Reset the robot map area</p>"},{"location":"AXRobot/AXRobot-resetMap/#parameters","title":"Parameters","text":"Name Data Type Description <code>areaId</code> string Map area ID"},{"location":"AXRobot/AXRobot-resetMap/#return-value-promiseboolean","title":"Return value <code>Promise.&lt;boolean&gt;</code>","text":"<p>Whether the setting is successful</p> <ul> <li><code>true</code> - success</li> <li><code>false</code> - fail</li> </ul>"},{"location":"AXRobot/AXRobot-resetMap/#example","title":"Example","text":"<p>```javascript ... const success = await axRobot.resetMap(\"\"); ... ````"},{"location":"AXRobot/AXRobot-resetPose/","title":"Relocation","text":""},{"location":"AXRobot/AXRobot-resetPose/#resetposemappose-promiseboolean","title":"<code>resetPose(mapPose) -&gt; {Promise.&lt;boolean&gt;}</code>","text":"<p>Reset the robot pose</p>"},{"location":"AXRobot/AXRobot-resetPose/#parameters","title":"Parameters","text":"Name Data Type Description <code>mapPose</code> MapPose Pose <code>isChargingPose</code> boolean optional; Whether it is the charging pile pose"},{"location":"AXRobot/AXRobot-resetPose/#return-value-promiseboolean","title":"Return value <code>Promise.&lt;boolean&gt;</code>","text":"<p>Whether the setting is successful</p> <ul> <li><code>true</code> - success</li> <li><code>false</code> - fail</li> </ul>"},{"location":"AXRobot/AXRobot-resetPose/#example","title":"Example","text":"<p>```javascript ... const success = await resetPose({    areaId: \"\",    x: 0,    y: 0,    yaw: 0 }); ... ````"},{"location":"AXRobot/AXRobot-restartRobot/","title":"Restart Robot","text":""},{"location":"AXRobot/AXRobot-restartRobot/#restartrobot-promiseboolean","title":"<code>restartRobot() -&gt; {Promise.&lt;boolean&gt;}</code>","text":"<p>Restart Robot</p>"},{"location":"AXRobot/AXRobot-restartRobot/#parameters","title":"Parameters","text":"<p>none</p>"},{"location":"AXRobot/AXRobot-restartRobot/#return-value-promiseboolean","title":"Return value <code>Promise.&lt;boolean&gt;</code>","text":"<p>whether succeed</p> <ul> <li>true - success</li> <li>false - fail</li> </ul>"},{"location":"AXRobot/AXRobot-restartRobot/#example","title":"Example","text":"<pre><code>...\nconst success = await axRobot.restartRobot();\n...\n</code></pre>"},{"location":"AXRobot/AXRobot-restartTask/","title":"Restart Current Task","text":""},{"location":"AXRobot/AXRobot-restartTask/#methods","title":"Methods","text":""},{"location":"AXRobot/AXRobot-restartTask/#restarttasktaskid-promiseboolean","title":"<code>restartTask(taskId) -&gt; {Promise.&lt;boolean&gt;}</code>","text":"<p>Resume a paused or ended task.</p>"},{"location":"AXRobot/AXRobot-restartTask/#parameters","title":"Parameters","text":"Name Type Description <code>taskId</code> string task ID"},{"location":"AXRobot/AXRobot-restartTask/#return-value-promiseboolean","title":"Return value <code>Promise.&lt;boolean&gt;</code>","text":"<p>whether succeed</p> <ul> <li><code>true</code> - success</li> <li><code>false</code> - fail</li> </ul>"},{"location":"AXRobot/AXRobot-restartTask/#example","title":"Example","text":"<pre><code>...\nconst success = await axRobot.restartTask(\"&lt;taskId&gt;\");\n...\n</code></pre>"},{"location":"AXRobot/AXRobot-resumeTask/","title":"Resume Task","text":""},{"location":"AXRobot/AXRobot-resumeTask/#resumetask-promiseboolean","title":"<code>resumeTask() -&gt; {Promise.&lt;boolean&gt;}</code>","text":"<p>Resume task</p>"},{"location":"AXRobot/AXRobot-resumeTask/#parameters","title":"Parameters","text":"<p>None</p>"},{"location":"AXRobot/AXRobot-resumeTask/#return-value-promiseboolean","title":"Return Value <code>Promise.&lt;boolean&gt;</code>","text":"<p>Whether the execution is successful</p> <ul> <li><code>true</code> - success</li> <li><code>false</code> - fail</li> </ul>"},{"location":"AXRobot/AXRobot-resumeTask/#example","title":"Example","text":"<pre><code>...\nconst success = await resumeTask();\n...\n</code></pre>"},{"location":"AXRobot/AXRobot-setEmergency/","title":"Set Emergency Stop","text":""},{"location":"AXRobot/AXRobot-setEmergency/#setemergencytype-void","title":"<code>setEmergency(type) -&gt; {void}</code>","text":"<p>Set the robot to enter the emergency stop state</p>"},{"location":"AXRobot/AXRobot-setEmergency/#parameters","title":"Parameters","text":"Name Data Type Description <code>type</code> EmergencyType Emergency stop method"},{"location":"AXRobot/AXRobot-setEmergency/#return-value","title":"Return Value","text":"<p>none</p>"},{"location":"AXRobot/AXRobot-setEmergency/#example","title":"Example","text":"<p>```javascript ... axRobot.setEmergency(EmergencyType.Start); // enter emergency stop state ... axRobot.setEmergency(EmergencyType.Stop); // end the emergency stop state ... ````</p>"},{"location":"AXRobot/AXRobot-setEnableTrack/","title":"Setup Robot Tracking","text":""},{"location":"AXRobot/AXRobot-setEnableTrack/#setenabletrackenable-void","title":"<code>setEnableTrack(enable) -&gt; void</code>","text":"<p>Set the robot motion tracking (requires map display)</p>"},{"location":"AXRobot/AXRobot-setEnableTrack/#parameters","title":"Parameters","text":"Name Data Type Description <code>enable</code> boolean Whether to track the trajectory of the robot"},{"location":"AXRobot/AXRobot-setEnableTrack/#return-value","title":"Return Value","text":"<p>none</p>"},{"location":"AXRobot/AXRobot-setEnableTrack/#example","title":"Example","text":"<p>```javascript ... axRobot.setEnableTrack(true); ... ````</p>"},{"location":"AXRobot/AXRobot-setGlobalPosition/","title":"Set Global Position","text":""},{"location":"AXRobot/AXRobot-setGlobalPosition/#setglobalposition-promiseboolean","title":"<code>setGlobalPosition() -&gt; {Promise.&lt;boolean&gt;}</code>","text":"<p>Set Robot Global Position</p>"},{"location":"AXRobot/AXRobot-setGlobalPosition/#parameters","title":"Parameters","text":"<p>none</p>"},{"location":"AXRobot/AXRobot-setGlobalPosition/#return-value-promiseboolean","title":"Return value <code>Promise.&lt;boolean&gt;</code>","text":"<p>whether credible</p> <ul> <li>true - credible</li> <li>false - not credible</li> </ul>"},{"location":"AXRobot/AXRobot-setGlobalPosition/#example","title":"Example","text":"<pre><code>...\nconst success = await axRobot.setGlobalPosition();\n...\n</code></pre>"},{"location":"AXRobot/AXRobot-setLanguage/","title":"Set Language","text":""},{"location":"AXRobot/AXRobot-setLanguage/#setlanguagelanguge-promiseboolean","title":"<code>setLanguage(languge) -&gt; {Promise.&lt;boolean&gt;}</code>","text":"<p>Set language</p>"},{"location":"AXRobot/AXRobot-setLanguage/#parameters","title":"Parameters","text":"Name Type Description <code>language</code> number Language Code1 - Chinese Simplified2 - English3 - Chinese Traditional 4 - Japanese5 - Korean"},{"location":"AXRobot/AXRobot-setLanguage/#return-value-promiseboolean","title":"Return Value <code>Promise.&lt;boolean&gt;</code>","text":"<p>Whether the execution is successful</p> <ul> <li><code>true</code> - success</li> <li><code>false</code> - fail</li> </ul>"},{"location":"AXRobot/AXRobot-setLanguage/#example","title":"Example","text":"<pre><code>...\nsucccess := await axRobot.setLanguage(1);\nif (success) {\n  ...\n} else {\n  ...\n}\n...\n</code></pre>"},{"location":"AXRobot/AXRobot-setPlayAudio/","title":"Set Play Audio","text":""},{"location":"AXRobot/AXRobot-setPlayAudio/#setplayaudioplayaudio-promiseboolean","title":"<code>setPlayAudio(playAudio) -&gt; {Promise.&lt;boolean&gt;}</code>","text":"<p>Set Play Audio</p>"},{"location":"AXRobot/AXRobot-setPlayAudio/#parameters","title":"Parameters","text":"Name Data Type Description <code>playAudio</code> PlayAudio Play Audio"},{"location":"AXRobot/AXRobot-setPlayAudio/#return-value-promiseboolean","title":"Return value <code>Promise.&lt;boolean&gt;</code>","text":"<p>whether succeed</p> <ul> <li>true - success</li> <li>false - fail</li> </ul>"},{"location":"AXRobot/AXRobot-setPlayAudio/#example","title":"Example","text":"<pre><code>...\nlet playAudio = {\n    mode: 1,\n    url: \"\",\n    audioId: \"38001\",\n    volume: 10,\n    interval: -1,\n    num: 1,\n    duration: 5\n}\nconst success = await axRobot.setPlayAudio(playAudio);\n...\n</code></pre>"},{"location":"AXRobot/AXRobot-setRouteMode/","title":"Set Network Mode","text":""},{"location":"AXRobot/AXRobot-setRouteMode/#setroutemodemode-promiseboolean","title":"<code>setRouteMode(mode) -&gt; {Promise.&lt;boolean&gt;}</code>","text":"<p>Set Robot Network Mode</p>"},{"location":"AXRobot/AXRobot-setRouteMode/#parameters","title":"Parameters","text":"Name Data Type Description <code>mode</code> number Network Mode 0: Head shell supply network 1: Chassis wifi network supply 2: Chassis 4G network supply 3: Chassis supply network"},{"location":"AXRobot/AXRobot-setRouteMode/#return-value-promiseboolean","title":"Return value <code>Promise.&lt;boolean&gt;</code>","text":"<p>whether succeed</p> <ul> <li>true - success</li> <li>false - fail</li> </ul>"},{"location":"AXRobot/AXRobot-setRouteMode/#example","title":"Example","text":"<pre><code>...\nconst success = await axRobot.setRouteMode(0);\n...\n</code></pre>"},{"location":"AXRobot/AXRobot-setServerInfos/","title":"Set Server Info","text":""},{"location":"AXRobot/AXRobot-setServerInfos/#setserverinfosserverinfo-promiseboolean","title":"<code>setServerInfos(serverInfo) -&gt; {Promise.&lt;boolean&gt;}</code>","text":"<p>Set service information for robot connection</p>"},{"location":"AXRobot/AXRobot-setServerInfos/#parameters","title":"Parameters","text":"Name Data Type Description <code>serverInfo</code> ServerInfo Server Info"},{"location":"AXRobot/AXRobot-setServerInfos/#return-value-promiseboolean","title":"Return value <code>Promise.&lt;boolean&gt;</code>","text":"<p>whether succeed</p> <ul> <li>true - success</li> <li>false - fail</li> </ul>"},{"location":"AXRobot/AXRobot-setServerInfos/#example","title":"Example","text":"<pre><code>...\nlet serverInfo = {\n    ip: \"http://127.0.0.1:8080/\",\n    type: -1,\n    offline: 0\n}\nconst success = await axRobot.setServerInfos(serverInfo);\n...\n</code></pre>"},{"location":"AXRobot/AXRobot-setSpeed/","title":"Set Speed","text":""},{"location":"AXRobot/AXRobot-setSpeed/#setspeedspeed-promiseboolean","title":"<code>setSpeed(speed) -&gt; {Promise.&lt;boolean&gt;}</code>","text":"<p>Set the robot movement speed</p>"},{"location":"AXRobot/AXRobot-setSpeed/#parameters","title":"Parameters","text":"Name Data Type Description <code>speed</code> number Movement speed, unit: m/s"},{"location":"AXRobot/AXRobot-setSpeed/#return-value-promiseboolean","title":"Return value <code>Promise.&lt;boolean&gt;</code>","text":"<p>whether succeed</p> <ul> <li><code>true</code> - success</li> <li><code>false</code> - fail</li> </ul>"},{"location":"AXRobot/AXRobot-setSpeed/#example","title":"Example","text":"<p>```javascript ... const success = await axRobot.setSpeed(0.5); ... ````</p>"},{"location":"AXRobot/AXRobot-setVolume/","title":"Set Volume","text":""},{"location":"AXRobot/AXRobot-setVolume/#setvolumevolume-mode-promiseboolean","title":"<code>setVolume(volume, mode) -&gt; {Promise.&lt;boolean&gt;}</code>","text":"<p>Set the robot volume</p>"},{"location":"AXRobot/AXRobot-setVolume/#parameters","title":"Parameters","text":"Name Data Type Description <code>volume</code> number volume, value range 0~100 <code>mode</code> number Execution mode1 - Host computer2 - Chassis"},{"location":"AXRobot/AXRobot-setVolume/#return-value-promiseboolean","title":"Return value <code>Promise.&lt;boolean&gt;</code>","text":"<p>Whether the setting is successful</p> <ul> <li><code>true</code> - success</li> <li><code>false</code> - fail</li> </ul>"},{"location":"AXRobot/AXRobot-setVolume/#example","title":"Example","text":"<p>```javascript ... const success = await axRobot.setVolume(50, 1); ... ````</p>"},{"location":"AXRobot/AXRobot-setWifi/","title":"Set Wifi","text":""},{"location":"AXRobot/AXRobot-setWifi/#setwifissid-password-promiseboolean","title":"<code>setWifi(ssId, password) -&gt; {Promise.&lt;boolean&gt;}</code>","text":"<p>Set robot chassis wifi</p>"},{"location":"AXRobot/AXRobot-setWifi/#parameters","title":"Parameters","text":"Name Data Type Description <code>ssId</code> string wifi name <code>password</code> string password"},{"location":"AXRobot/AXRobot-setWifi/#return-value-promiseboolean","title":"Return value <code>Promise.&lt;boolean&gt;</code>","text":"<p>whether succeed</p> <ul> <li>true - success</li> <li>false - fail</li> </ul>"},{"location":"AXRobot/AXRobot-setWifi/#example","title":"Example","text":"<pre><code>...\nconst success = await axRobot.setWifi(\"test-wifi\", \"123456\");\n...\n</code></pre>"},{"location":"AXRobot/AXRobot-sprayer/","title":"Sprayer Control","text":""},{"location":"AXRobot/AXRobot-sprayer/#methods","title":"Methods","text":""},{"location":"AXRobot/AXRobot-sprayer/#opensprayergear-promiseboolean","title":"<code>openSprayer(gear) \u2192 {Promise.&lt;boolean&gt;}</code>","text":"<p>Turn on the sprayer</p>"},{"location":"AXRobot/AXRobot-sprayer/#parameters","title":"Parameters","text":"Name Type Description <code>gear</code> number gear"},{"location":"AXRobot/AXRobot-sprayer/#return-value-promiseboolean","title":"Return value <code>Promise.&lt;boolean&gt;</code>","text":"<p>whether succeed</p> <ul> <li><code>true</code> - success</li> <li><code>false</code> - fail</li> </ul>"},{"location":"AXRobot/AXRobot-sprayer/#example","title":"Example","text":"<pre><code>...\nconst success = await axRobot.openSprayer(\"&lt;gear&gt;\");\n...\n</code></pre>"},{"location":"AXRobot/AXRobot-sprayer/#closesprayer-promiseboolean","title":"<code>closeSprayer() \u2192 {Promise.&lt;boolean&gt;}</code>","text":"<p>Turn off the sprayer</p>"},{"location":"AXRobot/AXRobot-sprayer/#return-value-promiseboolean_1","title":"Return value <code>Promise.&lt;boolean&gt;</code>","text":"<p>whether succeed</p> <ul> <li><code>true</code> - success</li> <li><code>false</code> - fail</li> </ul>"},{"location":"AXRobot/AXRobot-sprayer/#example_1","title":"Example","text":"<pre><code>...\nconst success = await axRobot.closeSprayer();\n...\n</code></pre>"},{"location":"AXRobot/AXRobot-startTask/","title":"Start Task","text":""},{"location":"AXRobot/AXRobot-startTask/#methods","title":"Methods","text":""},{"location":"AXRobot/AXRobot-startTask/#starttasktask-promiseboolean","title":"<code>startTask(task) -&gt; {Promise.&lt;boolean&gt;}</code>","text":"<p>Start the task.</p>"},{"location":"AXRobot/AXRobot-startTask/#parameters","title":"Parameters","text":"Name Type Description <code>task</code> TaskInfo task info"},{"location":"AXRobot/AXRobot-startTask/#return-value-promiseboolean","title":"Return value <code>Promise.&lt;boolean&gt;</code>","text":"<p>whether succeed</p> <ul> <li><code>true</code> - success</li> <li><code>false</code> - fail</li> </ul>"},{"location":"AXRobot/AXRobot-startTask/#example","title":"Example","text":"<pre><code>...\nlet task = {\n   name: \"More Food Delivery\",\n   runNum: 1,\n   taskType: 2,\n   runType: 21,\n   taskPts: [\n     {\n       x: 0.11,\n       y: 1.22,\n       yaw: 89,\n       areaId: \"xxxxxxxxxxxxxxx\",\n       type: -1,\n       ext: {},\n       stepActs: [\n         {\n           type: ActionType.PlayAudio,\n           data: {...}\n         },\n         ...\n       ]\n     },\n     ...\n   ]\n}\nconst success = await axRobot.startTask(task);\n...\n</code></pre>"},{"location":"AXRobot/AXRobot-stopPlayAudio/","title":"Stop Play Audio","text":""},{"location":"AXRobot/AXRobot-stopPlayAudio/#stopplayaudiomode-promiseboolean","title":"<code>stopPlayAudio(mode) -&gt; {Promise.&lt;boolean&gt;}</code>","text":"<p>Stop play audio</p>"},{"location":"AXRobot/AXRobot-stopPlayAudio/#parameters","title":"Parameters","text":"Name Type Description <code>mode</code> number 1 - Upper Mochine2 - Chassis"},{"location":"AXRobot/AXRobot-stopPlayAudio/#return-value-promiseboolean","title":"Return Value <code>Promise.&lt;boolean&gt;</code>","text":"<p>Whether the executiion is successful</p> <ul> <li><code>true</code> - success</li> <li><code>false</code> - fail</li> </ul>"},{"location":"AXRobot/AXRobot-stopPlayAudio/#example","title":"Example","text":"<pre><code>...\nconst success = await axRobot.stopPlayAudio(1);\n...\n</code></pre>"},{"location":"AXRobot/AXRobot-subscribeRealState/","title":"Subscribe To Robot Status","text":""},{"location":"AXRobot/AXRobot-subscribeRealState/#subscriberealstatelistener-void","title":"<code>subscribeRealState(listener) -&gt; {void}</code>","text":"<p>Subscribe to bot real-time status</p>"},{"location":"AXRobot/AXRobot-subscribeRealState/#parameters","title":"Parameters","text":"Name Data Type Description <code>listener</code> OnRobotListner Robot real-time status subscription callback"},{"location":"AXRobot/AXRobot-subscribeRealState/#return-value","title":"Return Value","text":"<p>none</p>"},{"location":"AXRobot/AXRobot-subscribeRealState/#example","title":"Example","text":"<p>```javascript ... axRobot.subscribeRealState({   onStateChanged: state =&gt; {     console.log(state.isManualMode); // whether to push the mode     console.log(state.isTasking); // Whether the task is being executed     console.log(state.isCharging); // is charging     console.log(state.isRemoteMode); // Whether remote control     console.log(state.battery); // current battery (percentage)     console.log(state.robotId); // Robot ID     console.log(state.speed); // current speed (m/s)     console.log(state.areaId); // current area ID     console.log(state.isEmergencyStop); // Whether emergency stop state     console.log(state.x); // x component of position coordinates     console.log(state.y); // y component of position coordinates     console.log(state.yaw); // current angle (radians)     console.log(state.locQuality); // Current positioning quality (0-100)     console.log(state.hasObstruction); // Is there an obstacle currently     console.log(state.errors); // fault code     console.log(state.isGoHome); // Whether it is returning to the pile for charging     console.log(state.timestamp); // timestamp of robot state</p> <pre><code>// do something\n</code></pre> <p>} }); ... ````</p>"},{"location":"AXRobot/AXRobot-subscribeTaskState/","title":"Subscribe To Task Status","text":""},{"location":"AXRobot/AXRobot-subscribeTaskState/#methods","title":"Methods","text":""},{"location":"AXRobot/AXRobot-subscribeTaskState/#subscribetaskstatelistener-void","title":"<code>subscribeTaskState(listener) -&gt; {void}</code>","text":"<p>Subscribe to task status.</p>"},{"location":"AXRobot/AXRobot-subscribeTaskState/#parameters","title":"Parameters","text":"Name Type Description <code>listener</code> OnTaskListener task status callback"},{"location":"AXRobot/AXRobot-subscribeTaskState/#return-value-void","title":"Return value <code>void</code>","text":""},{"location":"AXRobot/AXRobot-subscribeTaskState/#example","title":"Example","text":"<pre><code>...\naxRobot.startTask({\n   onTaskChanged: (state: any) =&gt; {\n     console.log(state.actType); // task state action type 1000-task start 14-departure 16-arrive 40-wait for interaction 1001-task complete\n     console.log(state.data); // specific task status data\n   }\n});\n...\n</code></pre>"},{"location":"AXRobot/AXRobot-updateMap/","title":"Update Map","text":""},{"location":"AXRobot/AXRobot-updateMap/#updatemap-promiseboolean","title":"<code>updateMap() -&gt; {Promise.&lt;boolean&gt;}</code>","text":"<p>Update robot map data</p>"},{"location":"AXRobot/AXRobot-updateMap/#parameters","title":"Parameters","text":"<p>none</p>"},{"location":"AXRobot/AXRobot-updateMap/#return-value-promiseboolean","title":"Return value <code>Promise.&lt;boolean&gt;</code>","text":"<p>Whether the update was successful</p> <ul> <li><code>true</code> - success</li> <li><code>false</code> - fail</li> </ul>"},{"location":"AXRobot/AXRobot-updateMap/#example","title":"Example","text":"<p>```javascript ... const success = await axRobot.updateMap(); ... ````</p>"},{"location":"AXRobot/AXRobot-updateTask/","title":"Update Current Task","text":""},{"location":"AXRobot/AXRobot-updateTask/#updatetasktaskid-pts-promiseboolean","title":"<code>updateTask(taskId, pts) -&gt; {Promise.&lt;boolean&gt;}</code>","text":"<p>Update tasks.</p>"},{"location":"AXRobot/AXRobot-updateTask/#parameters","title":"Parameters","text":"Name Type Description <code>taskId</code> string task ID <code>pts</code> Array List of task points; refer to the <code>taskPts</code> parameter for starting a task"},{"location":"AXRobot/AXRobot-updateTask/#return-value-promiseboolean","title":"Return value <code>Promise.&lt;boolean&gt;</code>","text":"<p>whether succeed</p> <ul> <li><code>true</code> - success</li> <li><code>false</code> - fail</li> </ul>"},{"location":"AXRobot/AXRobot-updateTask/#example","title":"Example","text":"<pre><code>...\n\nconst success = await axRobot.updateTask(\"&lt;taskId&gt;\", &lt;pts&gt;);\n...\n</code></pre>"},{"location":"Define/Define-ActionType/","title":"ActionType","text":"<p>Task Action Type</p>"},{"location":"Define/Define-ActionType/#enum","title":"Enum","text":"Value Description <code>ActionType.None</code> None <code>ActionType.PlayAudio</code> Play soundparameters <code>ActionType.OpenDoor</code> OpenDoorparameters <code>ActionType.Pause</code> Action Pauseparameter <code>ActionType.GearOperation</code> sprayer actionparameters <code>ActionType.StopAudio</code> stop playing soundparameter <code>ActionType.OpenLight</code> Open the light stripparameters <code>ActionType.CloseLight</code> Close the light stripparameter <code>ActionType.TaskStart</code> task startparameters <code>ActionType.TaskEnd</code> task endparameter"},{"location":"Define/Define-BaseAction/","title":"BaseAction","text":"<p>Task node action information</p>"},{"location":"Define/Define-BaseAction/#attributes","title":"Attributes","text":"Name Data Type Description <code>type</code> ActionType Action Type <code>data</code> object action parameters"},{"location":"Define/Define-CruiseInfo/","title":"CruiseInfo","text":"<p>Cruise Info</p>"},{"location":"Define/Define-CruiseInfo/#enum","title":"Enum","text":"Name Data Type Description <code>id</code> number cruise Id <code>name</code> string cruise Name <code>businessId</code> string business Id <code>sites</code> []CruisePoi cruise poi <code>remark</code> string remark <p>  CruisePoi - cruise poi</p>"},{"location":"Define/Define-CruiseInfo/#enum_1","title":"Enum","text":"Name Data Type Description <code>poiId</code> string poi Id <code>poiName</code> string poi Name"},{"location":"Define/Define-EmergencyType/","title":"EmergencyType","text":"<p>Robot emergency stop</p>"},{"location":"Define/Define-EmergencyType/#enum","title":"Enum","text":"Value Description <code>EmergencyType.Stop</code> Robot ends emergency stop state <code>EmergencyType.Start</code> Robot enters emergency stop state"},{"location":"Define/Define-FaultCode/","title":"FaultCode","text":"<p>The fault codes of chassis.</p> Value Description 0 none 1001 planning not running 1002 planning occupancy grid server not running 1003 planning map server not running 1004 planning cartographer occupancy grid node not running 1005 planning maps5cm not sending 1006 planning tracking ctrl not running 1007 planning stuck in moving 1008 planning remaining distance not reduce 2001 wheel not running 2002 wheel overloaded 2003 wheel state left not running 2004 wheel state right not running 2005 wheel state rate exception 2006 wheel general error 2007 wheel follow error 2008 wheel major slipping 2009 wheel startup error 2501 wheel slipping 3001 odom not running 3002 odom rate exception 4001 imu not running 4002 imu rate exception 4003 imu angular velocity exception 4004 imu vertical exception 4005 imu twitch 4006 imu rotate 4007 imu reconnect 4008 imu tilt angle extremely large 4501 imu has no calibration file 5001 lidar not running 5002 lidar rate exception 5003 lidar scan rate exception 5004 lidar perception node not running 5005 lidar irresponsive to command 5501 lidar scan rate exception momentarily 6001 system storage free space very low 6002 system load average very high 6003 system cpu usage very high 6004 system kernel temperature high 6005 system mem usage very high 6006 system emmc life time in grave danger 6007 system network connection with devices broken 6008 system critical system configs error 6009 system disk io is high 6501 system storage free space low 6502 system load average high 6503 system mem usage high 6504 system ntp failed 6505 system cpu usage high 6506 system time inconsistent with ntp 6507 system startup failed 6508 system emmc life time in danger 7001 positioning cartographer node not running 7002 positioning quality not reliable 7003 positioning slam state rate exception 7004 positioning quality not reliable from lidar 8001 baseboard not running 8002 baseboard battery state rate exception 8003 baseboard battery very low 8004 baseboard battery board malfunction 8005 baseboard battery contact touched differ from charging state 8006 baseboard motor current abnormal 8501 baseboard battery low 9001 other detectors not running 9002 other bluetooth node not running 9003 other emergency stop pressed 9004 other manual mode 9005 other remote mode 9006 other sensor manager not running 9007 other bottom sensor pack node not running 9008 other monitor not running 9009 other monitor watcher not running 9010 other startup parameter error 9011 other program crash 9012 other optical flow frequency abnormal 9013 other heatmap node not running 9501 other debug node is running 9502 other ax cache params exists 9503 other btm sensor exists but not enabled 10001 charging charge retry count exceeded 10002 charging charger detection error 10003 charging no current received 11001 camera depth opn node not running 11002 camera forward depth malfunction 11003 camera downward depth malfunction 11004 camera forward depth general error 11005 camera downward depth general error 11006 camera depth device not found 11007 camera depth opn general error 11008 camera rgb device not found 11009 camera rgb camera node dead 11010 camera rgb other error 11011 camera depth ihawk node not running 11012 camera depth ihawk general error 11013 camera depth ihawk may be covered 11501 camera depth has no calibration file"},{"location":"Define/Define-LightBelt/","title":"LightBelt","text":"<p>lights also control</p>"},{"location":"Define/Define-LightBelt/#attributes","title":"Attributes","text":"Name Data Type Description <code>mode</code> number Execution mode, 1-host computer, 2-chassis <code>color</code> LightColor Light color, see LightColor <code>indexs</code> LightIndex[] Segmented light strip array"},{"location":"Define/Define-LightColor/","title":"LightColor","text":"<p>light strip color</p>"},{"location":"Define/Define-LightColor/#enum","title":"Enum","text":"Value Description <code>LightColor.Red</code> red <code>LightColor.Green</code> Green <code>LightColor.Blue</code> blue <code>LightColor.Yellow</code> Yellow"},{"location":"Define/Define-LightIndex/","title":"LightIndex","text":"<p>Segmented light strip</p>"},{"location":"Define/Define-LightIndex/#attributes","title":"Attributes","text":"Name Data Type Description <code>index</code> number LED strip index <code>num</code> number Number of LED strips"},{"location":"Define/Define-MapPose/","title":"MapPose","text":"<p>map pose</p>"},{"location":"Define/Define-MapPose/#attributes","title":"Attributes","text":"Name Data Type Description <code>areaId</code> string Map area ID"},{"location":"Define/Define-MapPose/#inherited-from","title":"Inherited From","text":"<p>Pose</p>"},{"location":"Define/Define-MotionType/","title":"MotionType","text":"<p>Robot motion type</p>"},{"location":"Define/Define-MotionType/#enum","title":"Enum","text":"Value Description <code>MotionType.Forward</code> The robot moves forward, which is a motion without obstacle avoidance <code>MotionType.Back</code> The robot moves back, which is a motion without obstacle avoidance <code>MotionType.TurnLeft</code> The robot turns left, which is a motion without obstacle avoidance <code>MotionType.TurnRight</code> The robot turns right, which is a motion without obstacle avoidance <code>MotionType.Cancel</code> Robot stops motion <code>MotionType.Auto</code> Robot motion mode <code>MotionType.Manual</code> Robot push mode"},{"location":"Define/Define-OnRobotListener/","title":"OnRobotListener","text":"<p>Robot status subscription callback</p>"},{"location":"Define/Define-OnRobotListener/#attributes","title":"Attributes","text":"Name Data Type Description <code>onStateChange</code> function Robot state change callback"},{"location":"Define/Define-OnTaskListener/","title":"OnTaskListener","text":"<p>Task status subscription callback</p>"},{"location":"Define/Define-OnTaskListener/#attributes","title":"Attributes","text":"Name Data Type Description <code>onTaskChanged</code> function Task state change callback"},{"location":"Define/Define-PlayAudio/","title":"PlayAudio","text":"<p>Play Audio</p>"},{"location":"Define/Define-PlayAudio/#enum","title":"Enum","text":"Name Data Type Description <code>mode</code> number 1: Host computer processing, 2: Chassis processing <code>url</code> string audio address <code>audioId</code> string local audio resource ID <code>volume</code> number volume, value 0-100 <code>interval</code> number Circular broadcast interval, unit: second, -1 means broadcast only once <code>num</code> number Total Plays <code>duration</code> number Total playing time, unit: second"},{"location":"Define/Define-PoiType/","title":"POI Types","text":"Value Type Name <code>1</code> Fast food restaurants <code>2</code> Beverage shop <code>3</code> other <code>4</code> Company <code>5</code> Residential <code>6</code> Elevator <code>7</code> Gates <code>8</code> Automatic doors <code>9</code> Charging pile <code>10</code> standby point <code>11</code> table number <code>12</code> Private Room <code>13</code> Bar <code>14</code> Packing Area <code>15</code> Outlet <code>16</code> Lobby <code>17</code> Dining <code>18</code> Shop <code>19</code> Receptionist <code>20</code> house number <code>22</code> Work station number <code>21</code> room number <code>23</code> Container shipping point <code>24</code> Container Standby <code>25</code> Waypoints <code>26</code> Kill point <code>28</code> Waiting point <code>29</code> dispatch point <code>30</code> Shipping Sites"},{"location":"Define/Define-Pose/","title":"Pose","text":"<p>pose</p>"},{"location":"Define/Define-Pose/#attributes","title":"Attributes","text":"Name Data Type Description <code>x</code> number x component of position coordinates <code>y</code> number y component of position coordinates <code>yaw</code> number heading value in radians <code>angle</code> number optional; facing angle value"},{"location":"Define/Define-RequestPage/","title":"RequestPage","text":"<p>Pagination request parameters</p>"},{"location":"Define/Define-RequestPage/#attributes","title":"Attributes","text":"Name Data Type Description <code>pageSize</code> number Number of paging records <code>pageNum</code> number pagination page number"},{"location":"Define/Define-RequestParam/","title":"RequestParam","text":"<p>request parameters</p>"},{"location":"Define/Define-RequestParam/#attributes","title":"Attributes","text":"Name Data Type Description <code>robotId</code> string Robot ID <code>businessId</code> string optional; business ID <code>areaId</code> string optional; map area ID <code>type</code> number optional; POI type; Reference: POI Types <code>page</code> RequestPage optional; result paging parameter <code>properties</code> object optional; POI filter properties"},{"location":"Define/Define-ServerInfo/","title":"ServerInfo","text":"<p>Server Info</p>"},{"location":"Define/Define-ServerInfo/#_1","title":"\u5c5e\u6027","text":"Name Data Type Description <code>ip</code> string address <code>type</code> number server type  0: privatization1: international version-1: close privatization or international version <code>offline</code> number 0: not purely offline 1: purely offline"},{"location":"Define/Define-SingleTaskStatistics/","title":"SingleTaskStatistics","text":"<p>Single Task Statistics Info</p>"},{"location":"Define/Define-SingleTaskStatistics/#attributes","title":"Attributes","text":"Name Data Type Description <code>taskId</code> string task Id <code>fields</code> string[] Required data itemsmileagecStartTimecEndTimedisinfecttaskFinishCounttaskPauseCounttaskCancelCount"},{"location":"Define/Define-SingleTaskStatistics/#example","title":"Example","text":"<pre><code>{\n  \"taskId\": \"322751f4-1c00-45c2-bcf3-0e42aa9fa2c4\",\n  \"fields\": [\n    \"cStartTime\",\n    \"cEndTime\",\n    \"mileage\",\n    \"disinfect\",\n    \"taskCancelCount\",\n    \"errCount\",\n    \"taskFinishCount\",\n    \"taskPauseCount\"\n  ]\n}\n</code></pre>"},{"location":"Define/Define-StatisticsTotal/","title":"StatisticsTotal","text":"<p>Statistics Total Info</p>"},{"location":"Define/Define-StatisticsTotal/#attributes","title":"Attributes","text":"Name Data Type Description <code>startTime</code> number Start time, unit: milliseconds, starting at 00:00:00 of the current day, and the maximum time is one month <code>endTime</code> number End data, unit: millisecond, end at 11:59:59 of the current day <code>busIds</code> string[] Optional, business ids <code>deviceIds</code> string[] Optional, robot sn collection <code>dataItems</code> string[] Required data items mileagedurationtaskMileage taskDurationchargingCount errCountlocerrCountwarnCountdryBurnCountobstructCounttaskCancelCounttaskCounttaskFinishCounttaskPauseCountdisinfectCountonSprayCountsprayMileageremoteCountlow10BatCountlow20BatCountemergencyCountgohomeCountmanualCountdispatchCountmodspeedCount"},{"location":"Define/Define-StatisticsTotal/#example","title":"Example","text":"<pre><code>{\n  \"startTime\": 1682870400000,\n  \"endTime\": 1685548799000,\n  \"dataItems\": [\"taskDuration\",\"taskMileage\",\"mileage\",\"duration\",\"taskCount\"]\n}\n</code></pre>"},{"location":"Define/Define-TaskInfo/","title":"TaskInfo","text":"<p>Mission information</p>"},{"location":"Define/Define-TaskInfo/#attributes","title":"Attributes","text":"Name Data Type Description <code>name</code> string task name <code>robotId</code> string Robot ID <code>runNum</code> number The number of task executionsThe default is 1; 0 means infinite loop <code>taskType</code> number Task type0 - disinfecting1 - Back to the pile charging2 - Restaurant <code>runType</code> number Run Type0 - Scheduled Disinfection1 - Temporary Disinfection20 - Express Delivery21 - Multi-Order Delivery 22 - Lead23 - Cruise24 - Return25 - Charging Pile <code>curPt</code> TaskPoint Robot current position <code>taskPts</code> TaskPoint[] list of task nodes <code>backPt</code> TaskPoint optional; the node to return after the task ends"},{"location":"Define/Define-TaskPoint/","title":"TaskPoint","text":"<p>task node information</p>"},{"location":"Define/Define-TaskPoint/#attributes","title":"Attributes","text":"Name Data Type Description <code>areaId</code> string The ID of the map area where the task node is located <code>x</code> number task node coordinate x component <code>y</code> number task node coordinate y component <code>yaw</code> number The orientation of the task node; unit: angle <code>type</code> number POI type; Reference: POI Types <code>ext</code> object optional; task node custom extension information <code>stepActs</code> BaseAction[] optional; task node action list"},{"location":"Define/Define-TaskPoint/#example","title":"Example","text":"<pre><code>{\n  \"x\": 0.11,\n  \"y\": 1.22,\n  \"yaw\": 89,\n  \"areaId\": \"xxxx\",\n  \"type\": -1,\n  \"ext\": {...},\n  \"stepActs\": [...]\n}\n</code></pre>"},{"location":"Define/Define-TaskStatistics/","title":"TaskStatistics","text":"<p>Task Statistics Info</p>"},{"location":"Define/Define-TaskStatistics/#attributes","title":"Attributes","text":"Name Data Type Description <code>startTime</code> number Start time, unit: milliseconds, starting at 00:00:00 of the current day, and the maximum time is one month <code>endTime</code> number End data, unit: millisecond, end at 11:59:59 of the current day <code>type</code> number Task type0 - Disinfect1 - Go home2 - Delivery3 - SummoningDefault -1 All"},{"location":"Define/Define-TaskStatistics/#example","title":"Example","text":"<pre><code>{\n  \"startTime\": 1682870400000,\n  \"endTime\": 1685548799000,\n  \"type\": -1\n}\n</code></pre>"},{"location":"Define/ActionData/Define-ActionData-CloseDoor/","title":"ActionData - CloseDoor","text":"<p>Action parameters for closing the door</p>"},{"location":"Define/ActionData/Define-ActionData-CloseDoor/#attributes","title":"Attributes","text":"Name Data Type Description <code>mode</code> number execution mode;1 - host computer execution2 - chassis execution <code>doorIds</code> number[] Door number; the order is 1,2,3,4 from top to bottom and left to right"},{"location":"Define/ActionData/Define-ActionData-CloseDoor/#example","title":"Example","text":"<p>```javascript {    \"type\": ActionType.CloseDoor,    \"data\": {      \"mode\": 1,      \"doorIds\": [1]    } } ````</p>"},{"location":"Define/ActionData/Define-ActionData-CloseLight/","title":"ActionData - CloseLight","text":"<p>Turn off the light strip action parameter</p>"},{"location":"Define/ActionData/Define-ActionData-CloseLight/#attributes","title":"Attributes","text":"Name Data Type Description <code>mode</code> number execution mode;1 - host computer execution2 - chassis execution <code>indexs</code> LightIndex Optional; segment display, currently supports up to 4 segments"},{"location":"Define/ActionData/Define-ActionData-CloseLight/#example","title":"Example","text":"<p>```javascript {    \"type\": ActionType.OpenLight,    \"data\": {      \"mode\": 1,      \"indexes\": [        {          \"index\": 0,          \"num\": 10        }      ]    } } ````</p>"},{"location":"Define/ActionData/Define-ActionData-GearOperation/","title":"ActionData - GearOperation","text":"<p>Operation parameters of sprayer</p>"},{"location":"Define/ActionData/Define-ActionData-GearOperation/#attributes","title":"Attributes","text":"Name Data Type Description <code>subType</code> number Spray action parameters; 0: close spray, 1-5 set gear, open spray"},{"location":"Define/ActionData/Define-ActionData-GearOperation/#example","title":"Example","text":"<p>```javascript {    \"type\": ActionType.GearOperation,    \"data\": {      \"subType\": 2    } } ````</p>"},{"location":"Define/ActionData/Define-ActionData-OpenDoor/","title":"ActionData - OpenDoor","text":"<p>Open box door action parameters</p>"},{"location":"Define/ActionData/Define-ActionData-OpenDoor/#attributes","title":"Attributes","text":"Name Data Type Description <code>mode</code> number execution mode;1 - host computer execution2 - chassis execution <code>doorIds</code> number[] Door number; the order is 1,2,3,4 from top to bottom and left to right"},{"location":"Define/ActionData/Define-ActionData-OpenDoor/#example","title":"example","text":"<p>```javascript {    \"type\": ActionType.OpenDoor,    \"data\": {      \"mode\": 1,      \"doorIds\": [1]    } } ````</p>"},{"location":"Define/ActionData/Define-ActionData-OpenDoor/#_1","title":"ActionData - OpenDoor","text":""},{"location":"Define/ActionData/Define-ActionData-OpenLight/","title":"ActionData - OpenLight","text":"<p>Turn on the light strip action parameter Action parameter</p>"},{"location":"Define/ActionData/Define-ActionData-OpenLight/#attributes","title":"Attributes","text":"Name Data Type Description <code>mode</code> number execution mode;1 - host computer execution2 - chassis execution <code>color</code> LightColor Strip color <code>indexs</code> LightIndex Optional; segment display, currently supports up to 4 segments"},{"location":"Define/ActionData/Define-ActionData-OpenLight/#example","title":"Example","text":"<p>```javascript {    \"type\": ActionType.OpenLight,    \"data\": {      \"mode\": 1,      \"color\": LightColor.Green,      \"indexes\": [        {          \"index\": 0,          \"num\": 10        }      ]    } } ````</p>"},{"location":"Define/ActionData/Define-ActionData-Pause/","title":"ActionData - Pause","text":"<p>Pause Action Parameters</p>"},{"location":"Define/ActionData/Define-ActionData-Pause/#attributes","title":"Attributes","text":"Name Data Type Description <code>pauseTime</code> number Pause time, unit: seconds0 means no pause"},{"location":"Define/ActionData/Define-ActionData-Pause/#example","title":"Example","text":"<p>```javascript {    \"type\": ActionType.Pause,    \"data\": {      \"pauseTime\": 20    } } ````</p>"},{"location":"Define/ActionData/Define-ActionData-PlayAudio/","title":"ActionData - PlayAudio","text":"<p>Play Audio Action Parameters</p>"},{"location":"Define/ActionData/Define-ActionData-PlayAudio/#attributes","title":"Attributes","text":"Name Data Type Description <code>audioId</code> string optional;local audio resource identifier, default is filename <code>url</code> string optional; audio online URL <code>volume</code> number volume; 0~100 <code>mode</code> number execution mode;1 - host computer execution2 - chassis execution <code>interval</code> number Interval time for loop playback; unit: seconds-1 means play only once <code>num</code> number optional; number of plays <code>duration</code> number optional; total playback time; unit: secondsIf the <code>num</code> parameter is also set, the <code>num</code> parameter setting shall prevail <code>channel</code> number playback channel;1 - normal music2 - background musicThe chassis does not support multi-channel playback"},{"location":"Define/ActionData/Define-ActionData-PlayAudio/#example","title":"Example","text":"<p>```javascript {   \"type\": ActionType.PlayAudio,   \"data\": {     \"audioId\": \"3111001\",     \"volume\": 50,     \"mode\": 1,     \"interval\": 20,     \"num\": 10,     \"channel\": 1   } } ````</p>"},{"location":"Define/ActionData/Define-ActionData-StopAudio/","title":"ActionData - StopAudio","text":"<p>stop playing audio action parameter</p>"},{"location":"Define/ActionData/Define-ActionData-StopAudio/#attributes","title":"Attributes","text":"Name Data Type Description <code>mode</code> number execution mode;1 - host computer execution2 - chassis execution <code>channel</code> number playback channel;1 - normal music2 - background musicThe chassis does not support multi-channel playback"},{"location":"Define/ActionData/Define-ActionData-StopAudio/#example","title":"Example","text":"<p>```javascript {    \"type\": ActionType.StopAudio,    \"data\": {      \"mode\": 1,      \"channel\": 1    } } ````</p>"},{"location":"Define/ActionData/Define-ActionData-StopAudio/#_1","title":"ActionData - StopAudio","text":""},{"location":"Define/ActionData/Define-ActionData-TaskEnd/","title":"ActionData - TaskEnd","text":"<p>Task end action parameters</p>"},{"location":"Define/ActionData/Define-ActionData-TaskEnd/#attributes","title":"Attributes","text":"Name Data Type Description <code>taskId</code> string task ID"},{"location":"Define/ActionData/Define-ActionData-TaskEnd/#example","title":"Example","text":"<p>```javascript {    \"type\": TaskType.TaskEnd,    \"data\": {      \"taskId\": \"b4ddea09-2448-4db5-a580-47ae763f9693\"    } } ````</p>"},{"location":"Define/ActionData/Define-ActionData-TaskStart/","title":"ActionData - TaskStart","text":"<p>start task action parameter</p>"},{"location":"Define/ActionData/Define-ActionData-TaskStart/#attributes","title":"Attributes","text":"Name Data Type Description <code>taskId</code> string task ID"},{"location":"Define/ActionData/Define-ActionData-TaskStart/#example","title":"Example","text":"<p>```javascript {    \"type\": ActionType.TaskStart,    \"data\": {      \"taskId\": \"152afafb-a682-4d3c-934a-1099b3aa35e3\"    } } ````</p>"},{"location":"Statistics/AXStatis-singleTask/","title":"Single Task Statistics","text":""},{"location":"Statistics/AXStatis-singleTask/#getsingletaskstatistics-promiseany","title":"<code>getSingleTaskStatistics() -&gt; {Promise&lt;any&gt;}</code>","text":"<p>Single Task Statistics</p>"},{"location":"Statistics/AXStatis-singleTask/#parameters","title":"Parameters","text":"Name Type Description <code>singleTaskStatistics</code> SingleTaskStatistics"},{"location":"Statistics/AXStatis-singleTask/#return-value-promiseany","title":"Return value <code>Promise.&lt;any&gt;</code>","text":"Name Data Type Description <code>result</code> any Statistics Information"},{"location":"Statistics/AXStatis-singleTask/#example","title":"Example","text":"<pre><code>...\nconst result = await axRobot.getSingleTaskStatistics(singleTaskStatistics);\nconsole.log(result)\n...\n</code></pre>"},{"location":"Statistics/AXStatis-task/","title":"Task Statistics","text":""},{"location":"Statistics/AXStatis-task/#gettaskstatistics-promiseany","title":"<code>getTaskStatistics() -&gt; {Promise&lt;any&gt;}</code>","text":"<p>Task Statistics</p>"},{"location":"Statistics/AXStatis-task/#parameters","title":"Parameters","text":"Name Data Type Description <code>taskStatistics</code> TaskStatistics"},{"location":"Statistics/AXStatis-task/#return-value-promiseany","title":"Return value <code>Promise.&lt;any&gt;</code>","text":"Name Data Type Description <code>result</code> any Statistics Information"},{"location":"Statistics/AXStatis-task/#example","title":"Example","text":"<pre><code>...\nconst result = await axRobot.getTaskStatistics(taskStatistics);\nconsole.log(result)\n...\n</code></pre>"},{"location":"Statistics/AXStatis-total/","title":"Statistics Total","text":""},{"location":"Statistics/AXStatis-total/#getstatisticstotal-promiseany","title":"<code>getStatisticsTotal() -&gt; {Promise&lt;any&gt;}</code>","text":"<p>Statistics Total</p>"},{"location":"Statistics/AXStatis-total/#_1","title":"\u53c2\u6570","text":"Name Data Type Description <code>statisticsTotal</code> StatisticsTotal"},{"location":"Statistics/AXStatis-total/#return-value-promiseany","title":"Return value <code>Promise.&lt;any&gt;</code>","text":"Name Data Type Description <code>result</code> any Statistics Information"},{"location":"Statistics/AXStatis-total/#example","title":"Example","text":"<pre><code>...\nconst result = await axRobot.getStatisticsTotal(statisticsTotal);\nconsole.log(result)\n...\n</code></pre>"}]}